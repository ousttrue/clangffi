-- this is generated by luajitffi
local ffi = require('ffi')

-- cdef
require('clang.cdef.corecrt')
require('clang.cdef.CXString')
require('clang.cdef.vcruntime')
require('clang.cdef.CXErrorCode')
require('clang.cdef.Index')

local M = {
    libs = {},
    cache = {},
}
M.enums = {
    CXErrorCode = {
        CXError_Success = ffi.C.CXError_Success,
        CXError_Failure = ffi.C.CXError_Failure,
        CXError_Crashed = ffi.C.CXError_Crashed,
        CXError_InvalidArguments = ffi.C.CXError_InvalidArguments,
        CXError_ASTReadError = ffi.C.CXError_ASTReadError,
    },
    CXAvailabilityKind = {
        CXAvailability_Available = ffi.C.CXAvailability_Available,
        CXAvailability_Deprecated = ffi.C.CXAvailability_Deprecated,
        CXAvailability_NotAvailable = ffi.C.CXAvailability_NotAvailable,
        CXAvailability_NotAccessible = ffi.C.CXAvailability_NotAccessible,
    },
    CXCursor_ExceptionSpecificationKind = {
        CXCursor_ExceptionSpecificationKind_None = ffi.C.CXCursor_ExceptionSpecificationKind_None,
        CXCursor_ExceptionSpecificationKind_DynamicNone = ffi.C.CXCursor_ExceptionSpecificationKind_DynamicNone,
        CXCursor_ExceptionSpecificationKind_Dynamic = ffi.C.CXCursor_ExceptionSpecificationKind_Dynamic,
        CXCursor_ExceptionSpecificationKind_MSAny = ffi.C.CXCursor_ExceptionSpecificationKind_MSAny,
        CXCursor_ExceptionSpecificationKind_BasicNoexcept = ffi.C.CXCursor_ExceptionSpecificationKind_BasicNoexcept,
        CXCursor_ExceptionSpecificationKind_ComputedNoexcept = ffi.C.CXCursor_ExceptionSpecificationKind_ComputedNoexcept,
        CXCursor_ExceptionSpecificationKind_Unevaluated = ffi.C.CXCursor_ExceptionSpecificationKind_Unevaluated,
        CXCursor_ExceptionSpecificationKind_Uninstantiated = ffi.C.CXCursor_ExceptionSpecificationKind_Uninstantiated,
        CXCursor_ExceptionSpecificationKind_Unparsed = ffi.C.CXCursor_ExceptionSpecificationKind_Unparsed,
        CXCursor_ExceptionSpecificationKind_NoThrow = ffi.C.CXCursor_ExceptionSpecificationKind_NoThrow,
    },
    CXDiagnosticSeverity = {
        CXDiagnostic_Ignored = ffi.C.CXDiagnostic_Ignored,
        CXDiagnostic_Note = ffi.C.CXDiagnostic_Note,
        CXDiagnostic_Warning = ffi.C.CXDiagnostic_Warning,
        CXDiagnostic_Error = ffi.C.CXDiagnostic_Error,
        CXDiagnostic_Fatal = ffi.C.CXDiagnostic_Fatal,
    },
    CXLoadDiag_Error = {
        CXLoadDiag_None = ffi.C.CXLoadDiag_None,
        CXLoadDiag_Unknown = ffi.C.CXLoadDiag_Unknown,
        CXLoadDiag_CannotLoad = ffi.C.CXLoadDiag_CannotLoad,
        CXLoadDiag_InvalidFile = ffi.C.CXLoadDiag_InvalidFile,
    },
    CXDiagnosticDisplayOptions = {
        CXDiagnostic_DisplaySourceLocation = ffi.C.CXDiagnostic_DisplaySourceLocation,
        CXDiagnostic_DisplayColumn = ffi.C.CXDiagnostic_DisplayColumn,
        CXDiagnostic_DisplaySourceRanges = ffi.C.CXDiagnostic_DisplaySourceRanges,
        CXDiagnostic_DisplayOption = ffi.C.CXDiagnostic_DisplayOption,
        CXDiagnostic_DisplayCategoryId = ffi.C.CXDiagnostic_DisplayCategoryId,
        CXDiagnostic_DisplayCategoryName = ffi.C.CXDiagnostic_DisplayCategoryName,
    },
    CXTranslationUnit_Flags = {
        CXTranslationUnit_None = ffi.C.CXTranslationUnit_None,
        CXTranslationUnit_DetailedPreprocessingRecord = ffi.C.CXTranslationUnit_DetailedPreprocessingRecord,
        CXTranslationUnit_Incomplete = ffi.C.CXTranslationUnit_Incomplete,
        CXTranslationUnit_PrecompiledPreamble = ffi.C.CXTranslationUnit_PrecompiledPreamble,
        CXTranslationUnit_CacheCompletionResults = ffi.C.CXTranslationUnit_CacheCompletionResults,
        CXTranslationUnit_ForSerialization = ffi.C.CXTranslationUnit_ForSerialization,
        CXTranslationUnit_CXXChainedPCH = ffi.C.CXTranslationUnit_CXXChainedPCH,
        CXTranslationUnit_SkipFunctionBodies = ffi.C.CXTranslationUnit_SkipFunctionBodies,
        CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = ffi.C.CXTranslationUnit_IncludeBriefCommentsInCodeCompletion,
        CXTranslationUnit_CreatePreambleOnFirstParse = ffi.C.CXTranslationUnit_CreatePreambleOnFirstParse,
        CXTranslationUnit_KeepGoing = ffi.C.CXTranslationUnit_KeepGoing,
        CXTranslationUnit_SingleFileParse = ffi.C.CXTranslationUnit_SingleFileParse,
        CXTranslationUnit_LimitSkipFunctionBodiesToPreamble = ffi.C.CXTranslationUnit_LimitSkipFunctionBodiesToPreamble,
        CXTranslationUnit_IncludeAttributedTypes = ffi.C.CXTranslationUnit_IncludeAttributedTypes,
        CXTranslationUnit_VisitImplicitAttributes = ffi.C.CXTranslationUnit_VisitImplicitAttributes,
        CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles = ffi.C.CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles,
        CXTranslationUnit_RetainExcludedConditionalBlocks = ffi.C.CXTranslationUnit_RetainExcludedConditionalBlocks,
    },
    CXSaveTranslationUnit_Flags = {
        CXSaveTranslationUnit_None = ffi.C.CXSaveTranslationUnit_None,
    },
    CXSaveError = {
        CXSaveError_None = ffi.C.CXSaveError_None,
        CXSaveError_Unknown = ffi.C.CXSaveError_Unknown,
        CXSaveError_TranslationErrors = ffi.C.CXSaveError_TranslationErrors,
        CXSaveError_InvalidTU = ffi.C.CXSaveError_InvalidTU,
    },
    CXReparse_Flags = {
        CXReparse_None = ffi.C.CXReparse_None,
    },
    CXTUResourceUsageKind = {
        CXTUResourceUsage_AST = ffi.C.CXTUResourceUsage_AST,
        CXTUResourceUsage_Identifiers = ffi.C.CXTUResourceUsage_Identifiers,
        CXTUResourceUsage_Selectors = ffi.C.CXTUResourceUsage_Selectors,
        CXTUResourceUsage_GlobalCompletionResults = ffi.C.CXTUResourceUsage_GlobalCompletionResults,
        CXTUResourceUsage_SourceManagerContentCache = ffi.C.CXTUResourceUsage_SourceManagerContentCache,
        CXTUResourceUsage_AST_SideTables = ffi.C.CXTUResourceUsage_AST_SideTables,
        CXTUResourceUsage_SourceManager_Membuffer_Malloc = ffi.C.CXTUResourceUsage_SourceManager_Membuffer_Malloc,
        CXTUResourceUsage_SourceManager_Membuffer_MMap = ffi.C.CXTUResourceUsage_SourceManager_Membuffer_MMap,
        CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = ffi.C.CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc,
        CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = ffi.C.CXTUResourceUsage_ExternalASTSource_Membuffer_MMap,
        CXTUResourceUsage_Preprocessor = ffi.C.CXTUResourceUsage_Preprocessor,
        CXTUResourceUsage_PreprocessingRecord = ffi.C.CXTUResourceUsage_PreprocessingRecord,
        CXTUResourceUsage_SourceManager_DataStructures = ffi.C.CXTUResourceUsage_SourceManager_DataStructures,
        CXTUResourceUsage_Preprocessor_HeaderSearch = ffi.C.CXTUResourceUsage_Preprocessor_HeaderSearch,
        CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = ffi.C.CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN,
        CXTUResourceUsage_MEMORY_IN_BYTES_END = ffi.C.CXTUResourceUsage_MEMORY_IN_BYTES_END,
        CXTUResourceUsage_First = ffi.C.CXTUResourceUsage_First,
        CXTUResourceUsage_Last = ffi.C.CXTUResourceUsage_Last,
    },
    CXCursorKind = {
        CXCursor_UnexposedDecl = ffi.C.CXCursor_UnexposedDecl,
        CXCursor_StructDecl = ffi.C.CXCursor_StructDecl,
        CXCursor_UnionDecl = ffi.C.CXCursor_UnionDecl,
        CXCursor_ClassDecl = ffi.C.CXCursor_ClassDecl,
        CXCursor_EnumDecl = ffi.C.CXCursor_EnumDecl,
        CXCursor_FieldDecl = ffi.C.CXCursor_FieldDecl,
        CXCursor_EnumConstantDecl = ffi.C.CXCursor_EnumConstantDecl,
        CXCursor_FunctionDecl = ffi.C.CXCursor_FunctionDecl,
        CXCursor_VarDecl = ffi.C.CXCursor_VarDecl,
        CXCursor_ParmDecl = ffi.C.CXCursor_ParmDecl,
        CXCursor_ObjCInterfaceDecl = ffi.C.CXCursor_ObjCInterfaceDecl,
        CXCursor_ObjCCategoryDecl = ffi.C.CXCursor_ObjCCategoryDecl,
        CXCursor_ObjCProtocolDecl = ffi.C.CXCursor_ObjCProtocolDecl,
        CXCursor_ObjCPropertyDecl = ffi.C.CXCursor_ObjCPropertyDecl,
        CXCursor_ObjCIvarDecl = ffi.C.CXCursor_ObjCIvarDecl,
        CXCursor_ObjCInstanceMethodDecl = ffi.C.CXCursor_ObjCInstanceMethodDecl,
        CXCursor_ObjCClassMethodDecl = ffi.C.CXCursor_ObjCClassMethodDecl,
        CXCursor_ObjCImplementationDecl = ffi.C.CXCursor_ObjCImplementationDecl,
        CXCursor_ObjCCategoryImplDecl = ffi.C.CXCursor_ObjCCategoryImplDecl,
        CXCursor_TypedefDecl = ffi.C.CXCursor_TypedefDecl,
        CXCursor_CXXMethod = ffi.C.CXCursor_CXXMethod,
        CXCursor_Namespace = ffi.C.CXCursor_Namespace,
        CXCursor_LinkageSpec = ffi.C.CXCursor_LinkageSpec,
        CXCursor_Constructor = ffi.C.CXCursor_Constructor,
        CXCursor_Destructor = ffi.C.CXCursor_Destructor,
        CXCursor_ConversionFunction = ffi.C.CXCursor_ConversionFunction,
        CXCursor_TemplateTypeParameter = ffi.C.CXCursor_TemplateTypeParameter,
        CXCursor_NonTypeTemplateParameter = ffi.C.CXCursor_NonTypeTemplateParameter,
        CXCursor_TemplateTemplateParameter = ffi.C.CXCursor_TemplateTemplateParameter,
        CXCursor_FunctionTemplate = ffi.C.CXCursor_FunctionTemplate,
        CXCursor_ClassTemplate = ffi.C.CXCursor_ClassTemplate,
        CXCursor_ClassTemplatePartialSpecialization = ffi.C.CXCursor_ClassTemplatePartialSpecialization,
        CXCursor_NamespaceAlias = ffi.C.CXCursor_NamespaceAlias,
        CXCursor_UsingDirective = ffi.C.CXCursor_UsingDirective,
        CXCursor_UsingDeclaration = ffi.C.CXCursor_UsingDeclaration,
        CXCursor_TypeAliasDecl = ffi.C.CXCursor_TypeAliasDecl,
        CXCursor_ObjCSynthesizeDecl = ffi.C.CXCursor_ObjCSynthesizeDecl,
        CXCursor_ObjCDynamicDecl = ffi.C.CXCursor_ObjCDynamicDecl,
        CXCursor_CXXAccessSpecifier = ffi.C.CXCursor_CXXAccessSpecifier,
        CXCursor_FirstDecl = ffi.C.CXCursor_FirstDecl,
        CXCursor_LastDecl = ffi.C.CXCursor_LastDecl,
        CXCursor_FirstRef = ffi.C.CXCursor_FirstRef,
        CXCursor_ObjCSuperClassRef = ffi.C.CXCursor_ObjCSuperClassRef,
        CXCursor_ObjCProtocolRef = ffi.C.CXCursor_ObjCProtocolRef,
        CXCursor_ObjCClassRef = ffi.C.CXCursor_ObjCClassRef,
        CXCursor_TypeRef = ffi.C.CXCursor_TypeRef,
        CXCursor_CXXBaseSpecifier = ffi.C.CXCursor_CXXBaseSpecifier,
        CXCursor_TemplateRef = ffi.C.CXCursor_TemplateRef,
        CXCursor_NamespaceRef = ffi.C.CXCursor_NamespaceRef,
        CXCursor_MemberRef = ffi.C.CXCursor_MemberRef,
        CXCursor_LabelRef = ffi.C.CXCursor_LabelRef,
        CXCursor_OverloadedDeclRef = ffi.C.CXCursor_OverloadedDeclRef,
        CXCursor_VariableRef = ffi.C.CXCursor_VariableRef,
        CXCursor_LastRef = ffi.C.CXCursor_LastRef,
        CXCursor_FirstInvalid = ffi.C.CXCursor_FirstInvalid,
        CXCursor_InvalidFile = ffi.C.CXCursor_InvalidFile,
        CXCursor_NoDeclFound = ffi.C.CXCursor_NoDeclFound,
        CXCursor_NotImplemented = ffi.C.CXCursor_NotImplemented,
        CXCursor_InvalidCode = ffi.C.CXCursor_InvalidCode,
        CXCursor_LastInvalid = ffi.C.CXCursor_LastInvalid,
        CXCursor_FirstExpr = ffi.C.CXCursor_FirstExpr,
        CXCursor_UnexposedExpr = ffi.C.CXCursor_UnexposedExpr,
        CXCursor_DeclRefExpr = ffi.C.CXCursor_DeclRefExpr,
        CXCursor_MemberRefExpr = ffi.C.CXCursor_MemberRefExpr,
        CXCursor_CallExpr = ffi.C.CXCursor_CallExpr,
        CXCursor_ObjCMessageExpr = ffi.C.CXCursor_ObjCMessageExpr,
        CXCursor_BlockExpr = ffi.C.CXCursor_BlockExpr,
        CXCursor_IntegerLiteral = ffi.C.CXCursor_IntegerLiteral,
        CXCursor_FloatingLiteral = ffi.C.CXCursor_FloatingLiteral,
        CXCursor_ImaginaryLiteral = ffi.C.CXCursor_ImaginaryLiteral,
        CXCursor_StringLiteral = ffi.C.CXCursor_StringLiteral,
        CXCursor_CharacterLiteral = ffi.C.CXCursor_CharacterLiteral,
        CXCursor_ParenExpr = ffi.C.CXCursor_ParenExpr,
        CXCursor_UnaryOperator = ffi.C.CXCursor_UnaryOperator,
        CXCursor_ArraySubscriptExpr = ffi.C.CXCursor_ArraySubscriptExpr,
        CXCursor_BinaryOperator = ffi.C.CXCursor_BinaryOperator,
        CXCursor_CompoundAssignOperator = ffi.C.CXCursor_CompoundAssignOperator,
        CXCursor_ConditionalOperator = ffi.C.CXCursor_ConditionalOperator,
        CXCursor_CStyleCastExpr = ffi.C.CXCursor_CStyleCastExpr,
        CXCursor_CompoundLiteralExpr = ffi.C.CXCursor_CompoundLiteralExpr,
        CXCursor_InitListExpr = ffi.C.CXCursor_InitListExpr,
        CXCursor_AddrLabelExpr = ffi.C.CXCursor_AddrLabelExpr,
        CXCursor_StmtExpr = ffi.C.CXCursor_StmtExpr,
        CXCursor_GenericSelectionExpr = ffi.C.CXCursor_GenericSelectionExpr,
        CXCursor_GNUNullExpr = ffi.C.CXCursor_GNUNullExpr,
        CXCursor_CXXStaticCastExpr = ffi.C.CXCursor_CXXStaticCastExpr,
        CXCursor_CXXDynamicCastExpr = ffi.C.CXCursor_CXXDynamicCastExpr,
        CXCursor_CXXReinterpretCastExpr = ffi.C.CXCursor_CXXReinterpretCastExpr,
        CXCursor_CXXConstCastExpr = ffi.C.CXCursor_CXXConstCastExpr,
        CXCursor_CXXFunctionalCastExpr = ffi.C.CXCursor_CXXFunctionalCastExpr,
        CXCursor_CXXAddrspaceCastExpr = ffi.C.CXCursor_CXXAddrspaceCastExpr,
        CXCursor_CXXTypeidExpr = ffi.C.CXCursor_CXXTypeidExpr,
        CXCursor_CXXBoolLiteralExpr = ffi.C.CXCursor_CXXBoolLiteralExpr,
        CXCursor_CXXNullPtrLiteralExpr = ffi.C.CXCursor_CXXNullPtrLiteralExpr,
        CXCursor_CXXThisExpr = ffi.C.CXCursor_CXXThisExpr,
        CXCursor_CXXThrowExpr = ffi.C.CXCursor_CXXThrowExpr,
        CXCursor_CXXNewExpr = ffi.C.CXCursor_CXXNewExpr,
        CXCursor_CXXDeleteExpr = ffi.C.CXCursor_CXXDeleteExpr,
        CXCursor_UnaryExpr = ffi.C.CXCursor_UnaryExpr,
        CXCursor_ObjCStringLiteral = ffi.C.CXCursor_ObjCStringLiteral,
        CXCursor_ObjCEncodeExpr = ffi.C.CXCursor_ObjCEncodeExpr,
        CXCursor_ObjCSelectorExpr = ffi.C.CXCursor_ObjCSelectorExpr,
        CXCursor_ObjCProtocolExpr = ffi.C.CXCursor_ObjCProtocolExpr,
        CXCursor_ObjCBridgedCastExpr = ffi.C.CXCursor_ObjCBridgedCastExpr,
        CXCursor_PackExpansionExpr = ffi.C.CXCursor_PackExpansionExpr,
        CXCursor_SizeOfPackExpr = ffi.C.CXCursor_SizeOfPackExpr,
        CXCursor_LambdaExpr = ffi.C.CXCursor_LambdaExpr,
        CXCursor_ObjCBoolLiteralExpr = ffi.C.CXCursor_ObjCBoolLiteralExpr,
        CXCursor_ObjCSelfExpr = ffi.C.CXCursor_ObjCSelfExpr,
        CXCursor_OMPArraySectionExpr = ffi.C.CXCursor_OMPArraySectionExpr,
        CXCursor_ObjCAvailabilityCheckExpr = ffi.C.CXCursor_ObjCAvailabilityCheckExpr,
        CXCursor_FixedPointLiteral = ffi.C.CXCursor_FixedPointLiteral,
        CXCursor_OMPArrayShapingExpr = ffi.C.CXCursor_OMPArrayShapingExpr,
        CXCursor_OMPIteratorExpr = ffi.C.CXCursor_OMPIteratorExpr,
        CXCursor_LastExpr = ffi.C.CXCursor_LastExpr,
        CXCursor_FirstStmt = ffi.C.CXCursor_FirstStmt,
        CXCursor_UnexposedStmt = ffi.C.CXCursor_UnexposedStmt,
        CXCursor_LabelStmt = ffi.C.CXCursor_LabelStmt,
        CXCursor_CompoundStmt = ffi.C.CXCursor_CompoundStmt,
        CXCursor_CaseStmt = ffi.C.CXCursor_CaseStmt,
        CXCursor_DefaultStmt = ffi.C.CXCursor_DefaultStmt,
        CXCursor_IfStmt = ffi.C.CXCursor_IfStmt,
        CXCursor_SwitchStmt = ffi.C.CXCursor_SwitchStmt,
        CXCursor_WhileStmt = ffi.C.CXCursor_WhileStmt,
        CXCursor_DoStmt = ffi.C.CXCursor_DoStmt,
        CXCursor_ForStmt = ffi.C.CXCursor_ForStmt,
        CXCursor_GotoStmt = ffi.C.CXCursor_GotoStmt,
        CXCursor_IndirectGotoStmt = ffi.C.CXCursor_IndirectGotoStmt,
        CXCursor_ContinueStmt = ffi.C.CXCursor_ContinueStmt,
        CXCursor_BreakStmt = ffi.C.CXCursor_BreakStmt,
        CXCursor_ReturnStmt = ffi.C.CXCursor_ReturnStmt,
        CXCursor_GCCAsmStmt = ffi.C.CXCursor_GCCAsmStmt,
        CXCursor_AsmStmt = ffi.C.CXCursor_AsmStmt,
        CXCursor_ObjCAtTryStmt = ffi.C.CXCursor_ObjCAtTryStmt,
        CXCursor_ObjCAtCatchStmt = ffi.C.CXCursor_ObjCAtCatchStmt,
        CXCursor_ObjCAtFinallyStmt = ffi.C.CXCursor_ObjCAtFinallyStmt,
        CXCursor_ObjCAtThrowStmt = ffi.C.CXCursor_ObjCAtThrowStmt,
        CXCursor_ObjCAtSynchronizedStmt = ffi.C.CXCursor_ObjCAtSynchronizedStmt,
        CXCursor_ObjCAutoreleasePoolStmt = ffi.C.CXCursor_ObjCAutoreleasePoolStmt,
        CXCursor_ObjCForCollectionStmt = ffi.C.CXCursor_ObjCForCollectionStmt,
        CXCursor_CXXCatchStmt = ffi.C.CXCursor_CXXCatchStmt,
        CXCursor_CXXTryStmt = ffi.C.CXCursor_CXXTryStmt,
        CXCursor_CXXForRangeStmt = ffi.C.CXCursor_CXXForRangeStmt,
        CXCursor_SEHTryStmt = ffi.C.CXCursor_SEHTryStmt,
        CXCursor_SEHExceptStmt = ffi.C.CXCursor_SEHExceptStmt,
        CXCursor_SEHFinallyStmt = ffi.C.CXCursor_SEHFinallyStmt,
        CXCursor_MSAsmStmt = ffi.C.CXCursor_MSAsmStmt,
        CXCursor_NullStmt = ffi.C.CXCursor_NullStmt,
        CXCursor_DeclStmt = ffi.C.CXCursor_DeclStmt,
        CXCursor_OMPParallelDirective = ffi.C.CXCursor_OMPParallelDirective,
        CXCursor_OMPSimdDirective = ffi.C.CXCursor_OMPSimdDirective,
        CXCursor_OMPForDirective = ffi.C.CXCursor_OMPForDirective,
        CXCursor_OMPSectionsDirective = ffi.C.CXCursor_OMPSectionsDirective,
        CXCursor_OMPSectionDirective = ffi.C.CXCursor_OMPSectionDirective,
        CXCursor_OMPSingleDirective = ffi.C.CXCursor_OMPSingleDirective,
        CXCursor_OMPParallelForDirective = ffi.C.CXCursor_OMPParallelForDirective,
        CXCursor_OMPParallelSectionsDirective = ffi.C.CXCursor_OMPParallelSectionsDirective,
        CXCursor_OMPTaskDirective = ffi.C.CXCursor_OMPTaskDirective,
        CXCursor_OMPMasterDirective = ffi.C.CXCursor_OMPMasterDirective,
        CXCursor_OMPCriticalDirective = ffi.C.CXCursor_OMPCriticalDirective,
        CXCursor_OMPTaskyieldDirective = ffi.C.CXCursor_OMPTaskyieldDirective,
        CXCursor_OMPBarrierDirective = ffi.C.CXCursor_OMPBarrierDirective,
        CXCursor_OMPTaskwaitDirective = ffi.C.CXCursor_OMPTaskwaitDirective,
        CXCursor_OMPFlushDirective = ffi.C.CXCursor_OMPFlushDirective,
        CXCursor_SEHLeaveStmt = ffi.C.CXCursor_SEHLeaveStmt,
        CXCursor_OMPOrderedDirective = ffi.C.CXCursor_OMPOrderedDirective,
        CXCursor_OMPAtomicDirective = ffi.C.CXCursor_OMPAtomicDirective,
        CXCursor_OMPForSimdDirective = ffi.C.CXCursor_OMPForSimdDirective,
        CXCursor_OMPParallelForSimdDirective = ffi.C.CXCursor_OMPParallelForSimdDirective,
        CXCursor_OMPTargetDirective = ffi.C.CXCursor_OMPTargetDirective,
        CXCursor_OMPTeamsDirective = ffi.C.CXCursor_OMPTeamsDirective,
        CXCursor_OMPTaskgroupDirective = ffi.C.CXCursor_OMPTaskgroupDirective,
        CXCursor_OMPCancellationPointDirective = ffi.C.CXCursor_OMPCancellationPointDirective,
        CXCursor_OMPCancelDirective = ffi.C.CXCursor_OMPCancelDirective,
        CXCursor_OMPTargetDataDirective = ffi.C.CXCursor_OMPTargetDataDirective,
        CXCursor_OMPTaskLoopDirective = ffi.C.CXCursor_OMPTaskLoopDirective,
        CXCursor_OMPTaskLoopSimdDirective = ffi.C.CXCursor_OMPTaskLoopSimdDirective,
        CXCursor_OMPDistributeDirective = ffi.C.CXCursor_OMPDistributeDirective,
        CXCursor_OMPTargetEnterDataDirective = ffi.C.CXCursor_OMPTargetEnterDataDirective,
        CXCursor_OMPTargetExitDataDirective = ffi.C.CXCursor_OMPTargetExitDataDirective,
        CXCursor_OMPTargetParallelDirective = ffi.C.CXCursor_OMPTargetParallelDirective,
        CXCursor_OMPTargetParallelForDirective = ffi.C.CXCursor_OMPTargetParallelForDirective,
        CXCursor_OMPTargetUpdateDirective = ffi.C.CXCursor_OMPTargetUpdateDirective,
        CXCursor_OMPDistributeParallelForDirective = ffi.C.CXCursor_OMPDistributeParallelForDirective,
        CXCursor_OMPDistributeParallelForSimdDirective = ffi.C.CXCursor_OMPDistributeParallelForSimdDirective,
        CXCursor_OMPDistributeSimdDirective = ffi.C.CXCursor_OMPDistributeSimdDirective,
        CXCursor_OMPTargetParallelForSimdDirective = ffi.C.CXCursor_OMPTargetParallelForSimdDirective,
        CXCursor_OMPTargetSimdDirective = ffi.C.CXCursor_OMPTargetSimdDirective,
        CXCursor_OMPTeamsDistributeDirective = ffi.C.CXCursor_OMPTeamsDistributeDirective,
        CXCursor_OMPTeamsDistributeSimdDirective = ffi.C.CXCursor_OMPTeamsDistributeSimdDirective,
        CXCursor_OMPTeamsDistributeParallelForSimdDirective = ffi.C.CXCursor_OMPTeamsDistributeParallelForSimdDirective,
        CXCursor_OMPTeamsDistributeParallelForDirective = ffi.C.CXCursor_OMPTeamsDistributeParallelForDirective,
        CXCursor_OMPTargetTeamsDirective = ffi.C.CXCursor_OMPTargetTeamsDirective,
        CXCursor_OMPTargetTeamsDistributeDirective = ffi.C.CXCursor_OMPTargetTeamsDistributeDirective,
        CXCursor_OMPTargetTeamsDistributeParallelForDirective = ffi.C.CXCursor_OMPTargetTeamsDistributeParallelForDirective,
        CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = ffi.C.CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective,
        CXCursor_OMPTargetTeamsDistributeSimdDirective = ffi.C.CXCursor_OMPTargetTeamsDistributeSimdDirective,
        CXCursor_BuiltinBitCastExpr = ffi.C.CXCursor_BuiltinBitCastExpr,
        CXCursor_OMPMasterTaskLoopDirective = ffi.C.CXCursor_OMPMasterTaskLoopDirective,
        CXCursor_OMPParallelMasterTaskLoopDirective = ffi.C.CXCursor_OMPParallelMasterTaskLoopDirective,
        CXCursor_OMPMasterTaskLoopSimdDirective = ffi.C.CXCursor_OMPMasterTaskLoopSimdDirective,
        CXCursor_OMPParallelMasterTaskLoopSimdDirective = ffi.C.CXCursor_OMPParallelMasterTaskLoopSimdDirective,
        CXCursor_OMPParallelMasterDirective = ffi.C.CXCursor_OMPParallelMasterDirective,
        CXCursor_OMPDepobjDirective = ffi.C.CXCursor_OMPDepobjDirective,
        CXCursor_OMPScanDirective = ffi.C.CXCursor_OMPScanDirective,
        CXCursor_LastStmt = ffi.C.CXCursor_LastStmt,
        CXCursor_TranslationUnit = ffi.C.CXCursor_TranslationUnit,
        CXCursor_FirstAttr = ffi.C.CXCursor_FirstAttr,
        CXCursor_UnexposedAttr = ffi.C.CXCursor_UnexposedAttr,
        CXCursor_IBActionAttr = ffi.C.CXCursor_IBActionAttr,
        CXCursor_IBOutletAttr = ffi.C.CXCursor_IBOutletAttr,
        CXCursor_IBOutletCollectionAttr = ffi.C.CXCursor_IBOutletCollectionAttr,
        CXCursor_CXXFinalAttr = ffi.C.CXCursor_CXXFinalAttr,
        CXCursor_CXXOverrideAttr = ffi.C.CXCursor_CXXOverrideAttr,
        CXCursor_AnnotateAttr = ffi.C.CXCursor_AnnotateAttr,
        CXCursor_AsmLabelAttr = ffi.C.CXCursor_AsmLabelAttr,
        CXCursor_PackedAttr = ffi.C.CXCursor_PackedAttr,
        CXCursor_PureAttr = ffi.C.CXCursor_PureAttr,
        CXCursor_ConstAttr = ffi.C.CXCursor_ConstAttr,
        CXCursor_NoDuplicateAttr = ffi.C.CXCursor_NoDuplicateAttr,
        CXCursor_CUDAConstantAttr = ffi.C.CXCursor_CUDAConstantAttr,
        CXCursor_CUDADeviceAttr = ffi.C.CXCursor_CUDADeviceAttr,
        CXCursor_CUDAGlobalAttr = ffi.C.CXCursor_CUDAGlobalAttr,
        CXCursor_CUDAHostAttr = ffi.C.CXCursor_CUDAHostAttr,
        CXCursor_CUDASharedAttr = ffi.C.CXCursor_CUDASharedAttr,
        CXCursor_VisibilityAttr = ffi.C.CXCursor_VisibilityAttr,
        CXCursor_DLLExport = ffi.C.CXCursor_DLLExport,
        CXCursor_DLLImport = ffi.C.CXCursor_DLLImport,
        CXCursor_NSReturnsRetained = ffi.C.CXCursor_NSReturnsRetained,
        CXCursor_NSReturnsNotRetained = ffi.C.CXCursor_NSReturnsNotRetained,
        CXCursor_NSReturnsAutoreleased = ffi.C.CXCursor_NSReturnsAutoreleased,
        CXCursor_NSConsumesSelf = ffi.C.CXCursor_NSConsumesSelf,
        CXCursor_NSConsumed = ffi.C.CXCursor_NSConsumed,
        CXCursor_ObjCException = ffi.C.CXCursor_ObjCException,
        CXCursor_ObjCNSObject = ffi.C.CXCursor_ObjCNSObject,
        CXCursor_ObjCIndependentClass = ffi.C.CXCursor_ObjCIndependentClass,
        CXCursor_ObjCPreciseLifetime = ffi.C.CXCursor_ObjCPreciseLifetime,
        CXCursor_ObjCReturnsInnerPointer = ffi.C.CXCursor_ObjCReturnsInnerPointer,
        CXCursor_ObjCRequiresSuper = ffi.C.CXCursor_ObjCRequiresSuper,
        CXCursor_ObjCRootClass = ffi.C.CXCursor_ObjCRootClass,
        CXCursor_ObjCSubclassingRestricted = ffi.C.CXCursor_ObjCSubclassingRestricted,
        CXCursor_ObjCExplicitProtocolImpl = ffi.C.CXCursor_ObjCExplicitProtocolImpl,
        CXCursor_ObjCDesignatedInitializer = ffi.C.CXCursor_ObjCDesignatedInitializer,
        CXCursor_ObjCRuntimeVisible = ffi.C.CXCursor_ObjCRuntimeVisible,
        CXCursor_ObjCBoxable = ffi.C.CXCursor_ObjCBoxable,
        CXCursor_FlagEnum = ffi.C.CXCursor_FlagEnum,
        CXCursor_ConvergentAttr = ffi.C.CXCursor_ConvergentAttr,
        CXCursor_WarnUnusedAttr = ffi.C.CXCursor_WarnUnusedAttr,
        CXCursor_WarnUnusedResultAttr = ffi.C.CXCursor_WarnUnusedResultAttr,
        CXCursor_AlignedAttr = ffi.C.CXCursor_AlignedAttr,
        CXCursor_LastAttr = ffi.C.CXCursor_LastAttr,
        CXCursor_PreprocessingDirective = ffi.C.CXCursor_PreprocessingDirective,
        CXCursor_MacroDefinition = ffi.C.CXCursor_MacroDefinition,
        CXCursor_MacroExpansion = ffi.C.CXCursor_MacroExpansion,
        CXCursor_MacroInstantiation = ffi.C.CXCursor_MacroInstantiation,
        CXCursor_InclusionDirective = ffi.C.CXCursor_InclusionDirective,
        CXCursor_FirstPreprocessing = ffi.C.CXCursor_FirstPreprocessing,
        CXCursor_LastPreprocessing = ffi.C.CXCursor_LastPreprocessing,
        CXCursor_ModuleImportDecl = ffi.C.CXCursor_ModuleImportDecl,
        CXCursor_TypeAliasTemplateDecl = ffi.C.CXCursor_TypeAliasTemplateDecl,
        CXCursor_StaticAssert = ffi.C.CXCursor_StaticAssert,
        CXCursor_FriendDecl = ffi.C.CXCursor_FriendDecl,
        CXCursor_FirstExtraDecl = ffi.C.CXCursor_FirstExtraDecl,
        CXCursor_LastExtraDecl = ffi.C.CXCursor_LastExtraDecl,
        CXCursor_OverloadCandidate = ffi.C.CXCursor_OverloadCandidate,
    },
    CXLinkageKind = {
        CXLinkage_Invalid = ffi.C.CXLinkage_Invalid,
        CXLinkage_NoLinkage = ffi.C.CXLinkage_NoLinkage,
        CXLinkage_Internal = ffi.C.CXLinkage_Internal,
        CXLinkage_UniqueExternal = ffi.C.CXLinkage_UniqueExternal,
        CXLinkage_External = ffi.C.CXLinkage_External,
    },
    CXVisibilityKind = {
        CXVisibility_Invalid = ffi.C.CXVisibility_Invalid,
        CXVisibility_Hidden = ffi.C.CXVisibility_Hidden,
        CXVisibility_Protected = ffi.C.CXVisibility_Protected,
        CXVisibility_Default = ffi.C.CXVisibility_Default,
    },
    CXLanguageKind = {
        CXLanguage_Invalid = ffi.C.CXLanguage_Invalid,
        CXLanguage_C = ffi.C.CXLanguage_C,
        CXLanguage_ObjC = ffi.C.CXLanguage_ObjC,
        CXLanguage_CPlusPlus = ffi.C.CXLanguage_CPlusPlus,
    },
    CXTLSKind = {
        CXTLS_None = ffi.C.CXTLS_None,
        CXTLS_Dynamic = ffi.C.CXTLS_Dynamic,
        CXTLS_Static = ffi.C.CXTLS_Static,
    },
    CXTypeKind = {
        CXType_Invalid = ffi.C.CXType_Invalid,
        CXType_Unexposed = ffi.C.CXType_Unexposed,
        CXType_Void = ffi.C.CXType_Void,
        CXType_Bool = ffi.C.CXType_Bool,
        CXType_Char_U = ffi.C.CXType_Char_U,
        CXType_UChar = ffi.C.CXType_UChar,
        CXType_Char16 = ffi.C.CXType_Char16,
        CXType_Char32 = ffi.C.CXType_Char32,
        CXType_UShort = ffi.C.CXType_UShort,
        CXType_UInt = ffi.C.CXType_UInt,
        CXType_ULong = ffi.C.CXType_ULong,
        CXType_ULongLong = ffi.C.CXType_ULongLong,
        CXType_UInt128 = ffi.C.CXType_UInt128,
        CXType_Char_S = ffi.C.CXType_Char_S,
        CXType_SChar = ffi.C.CXType_SChar,
        CXType_WChar = ffi.C.CXType_WChar,
        CXType_Short = ffi.C.CXType_Short,
        CXType_Int = ffi.C.CXType_Int,
        CXType_Long = ffi.C.CXType_Long,
        CXType_LongLong = ffi.C.CXType_LongLong,
        CXType_Int128 = ffi.C.CXType_Int128,
        CXType_Float = ffi.C.CXType_Float,
        CXType_Double = ffi.C.CXType_Double,
        CXType_LongDouble = ffi.C.CXType_LongDouble,
        CXType_NullPtr = ffi.C.CXType_NullPtr,
        CXType_Overload = ffi.C.CXType_Overload,
        CXType_Dependent = ffi.C.CXType_Dependent,
        CXType_ObjCId = ffi.C.CXType_ObjCId,
        CXType_ObjCClass = ffi.C.CXType_ObjCClass,
        CXType_ObjCSel = ffi.C.CXType_ObjCSel,
        CXType_Float128 = ffi.C.CXType_Float128,
        CXType_Half = ffi.C.CXType_Half,
        CXType_Float16 = ffi.C.CXType_Float16,
        CXType_ShortAccum = ffi.C.CXType_ShortAccum,
        CXType_Accum = ffi.C.CXType_Accum,
        CXType_LongAccum = ffi.C.CXType_LongAccum,
        CXType_UShortAccum = ffi.C.CXType_UShortAccum,
        CXType_UAccum = ffi.C.CXType_UAccum,
        CXType_ULongAccum = ffi.C.CXType_ULongAccum,
        CXType_BFloat16 = ffi.C.CXType_BFloat16,
        CXType_FirstBuiltin = ffi.C.CXType_FirstBuiltin,
        CXType_LastBuiltin = ffi.C.CXType_LastBuiltin,
        CXType_Complex = ffi.C.CXType_Complex,
        CXType_Pointer = ffi.C.CXType_Pointer,
        CXType_BlockPointer = ffi.C.CXType_BlockPointer,
        CXType_LValueReference = ffi.C.CXType_LValueReference,
        CXType_RValueReference = ffi.C.CXType_RValueReference,
        CXType_Record = ffi.C.CXType_Record,
        CXType_Enum = ffi.C.CXType_Enum,
        CXType_Typedef = ffi.C.CXType_Typedef,
        CXType_ObjCInterface = ffi.C.CXType_ObjCInterface,
        CXType_ObjCObjectPointer = ffi.C.CXType_ObjCObjectPointer,
        CXType_FunctionNoProto = ffi.C.CXType_FunctionNoProto,
        CXType_FunctionProto = ffi.C.CXType_FunctionProto,
        CXType_ConstantArray = ffi.C.CXType_ConstantArray,
        CXType_Vector = ffi.C.CXType_Vector,
        CXType_IncompleteArray = ffi.C.CXType_IncompleteArray,
        CXType_VariableArray = ffi.C.CXType_VariableArray,
        CXType_DependentSizedArray = ffi.C.CXType_DependentSizedArray,
        CXType_MemberPointer = ffi.C.CXType_MemberPointer,
        CXType_Auto = ffi.C.CXType_Auto,
        CXType_Elaborated = ffi.C.CXType_Elaborated,
        CXType_Pipe = ffi.C.CXType_Pipe,
        CXType_OCLImage1dRO = ffi.C.CXType_OCLImage1dRO,
        CXType_OCLImage1dArrayRO = ffi.C.CXType_OCLImage1dArrayRO,
        CXType_OCLImage1dBufferRO = ffi.C.CXType_OCLImage1dBufferRO,
        CXType_OCLImage2dRO = ffi.C.CXType_OCLImage2dRO,
        CXType_OCLImage2dArrayRO = ffi.C.CXType_OCLImage2dArrayRO,
        CXType_OCLImage2dDepthRO = ffi.C.CXType_OCLImage2dDepthRO,
        CXType_OCLImage2dArrayDepthRO = ffi.C.CXType_OCLImage2dArrayDepthRO,
        CXType_OCLImage2dMSAARO = ffi.C.CXType_OCLImage2dMSAARO,
        CXType_OCLImage2dArrayMSAARO = ffi.C.CXType_OCLImage2dArrayMSAARO,
        CXType_OCLImage2dMSAADepthRO = ffi.C.CXType_OCLImage2dMSAADepthRO,
        CXType_OCLImage2dArrayMSAADepthRO = ffi.C.CXType_OCLImage2dArrayMSAADepthRO,
        CXType_OCLImage3dRO = ffi.C.CXType_OCLImage3dRO,
        CXType_OCLImage1dWO = ffi.C.CXType_OCLImage1dWO,
        CXType_OCLImage1dArrayWO = ffi.C.CXType_OCLImage1dArrayWO,
        CXType_OCLImage1dBufferWO = ffi.C.CXType_OCLImage1dBufferWO,
        CXType_OCLImage2dWO = ffi.C.CXType_OCLImage2dWO,
        CXType_OCLImage2dArrayWO = ffi.C.CXType_OCLImage2dArrayWO,
        CXType_OCLImage2dDepthWO = ffi.C.CXType_OCLImage2dDepthWO,
        CXType_OCLImage2dArrayDepthWO = ffi.C.CXType_OCLImage2dArrayDepthWO,
        CXType_OCLImage2dMSAAWO = ffi.C.CXType_OCLImage2dMSAAWO,
        CXType_OCLImage2dArrayMSAAWO = ffi.C.CXType_OCLImage2dArrayMSAAWO,
        CXType_OCLImage2dMSAADepthWO = ffi.C.CXType_OCLImage2dMSAADepthWO,
        CXType_OCLImage2dArrayMSAADepthWO = ffi.C.CXType_OCLImage2dArrayMSAADepthWO,
        CXType_OCLImage3dWO = ffi.C.CXType_OCLImage3dWO,
        CXType_OCLImage1dRW = ffi.C.CXType_OCLImage1dRW,
        CXType_OCLImage1dArrayRW = ffi.C.CXType_OCLImage1dArrayRW,
        CXType_OCLImage1dBufferRW = ffi.C.CXType_OCLImage1dBufferRW,
        CXType_OCLImage2dRW = ffi.C.CXType_OCLImage2dRW,
        CXType_OCLImage2dArrayRW = ffi.C.CXType_OCLImage2dArrayRW,
        CXType_OCLImage2dDepthRW = ffi.C.CXType_OCLImage2dDepthRW,
        CXType_OCLImage2dArrayDepthRW = ffi.C.CXType_OCLImage2dArrayDepthRW,
        CXType_OCLImage2dMSAARW = ffi.C.CXType_OCLImage2dMSAARW,
        CXType_OCLImage2dArrayMSAARW = ffi.C.CXType_OCLImage2dArrayMSAARW,
        CXType_OCLImage2dMSAADepthRW = ffi.C.CXType_OCLImage2dMSAADepthRW,
        CXType_OCLImage2dArrayMSAADepthRW = ffi.C.CXType_OCLImage2dArrayMSAADepthRW,
        CXType_OCLImage3dRW = ffi.C.CXType_OCLImage3dRW,
        CXType_OCLSampler = ffi.C.CXType_OCLSampler,
        CXType_OCLEvent = ffi.C.CXType_OCLEvent,
        CXType_OCLQueue = ffi.C.CXType_OCLQueue,
        CXType_OCLReserveID = ffi.C.CXType_OCLReserveID,
        CXType_ObjCObject = ffi.C.CXType_ObjCObject,
        CXType_ObjCTypeParam = ffi.C.CXType_ObjCTypeParam,
        CXType_Attributed = ffi.C.CXType_Attributed,
        CXType_OCLIntelSubgroupAVCMcePayload = ffi.C.CXType_OCLIntelSubgroupAVCMcePayload,
        CXType_OCLIntelSubgroupAVCImePayload = ffi.C.CXType_OCLIntelSubgroupAVCImePayload,
        CXType_OCLIntelSubgroupAVCRefPayload = ffi.C.CXType_OCLIntelSubgroupAVCRefPayload,
        CXType_OCLIntelSubgroupAVCSicPayload = ffi.C.CXType_OCLIntelSubgroupAVCSicPayload,
        CXType_OCLIntelSubgroupAVCMceResult = ffi.C.CXType_OCLIntelSubgroupAVCMceResult,
        CXType_OCLIntelSubgroupAVCImeResult = ffi.C.CXType_OCLIntelSubgroupAVCImeResult,
        CXType_OCLIntelSubgroupAVCRefResult = ffi.C.CXType_OCLIntelSubgroupAVCRefResult,
        CXType_OCLIntelSubgroupAVCSicResult = ffi.C.CXType_OCLIntelSubgroupAVCSicResult,
        CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout = ffi.C.CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout,
        CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout = ffi.C.CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout,
        CXType_OCLIntelSubgroupAVCImeSingleRefStreamin = ffi.C.CXType_OCLIntelSubgroupAVCImeSingleRefStreamin,
        CXType_OCLIntelSubgroupAVCImeDualRefStreamin = ffi.C.CXType_OCLIntelSubgroupAVCImeDualRefStreamin,
        CXType_ExtVector = ffi.C.CXType_ExtVector,
        CXType_Atomic = ffi.C.CXType_Atomic,
    },
    CXCallingConv = {
        CXCallingConv_Default = ffi.C.CXCallingConv_Default,
        CXCallingConv_C = ffi.C.CXCallingConv_C,
        CXCallingConv_X86StdCall = ffi.C.CXCallingConv_X86StdCall,
        CXCallingConv_X86FastCall = ffi.C.CXCallingConv_X86FastCall,
        CXCallingConv_X86ThisCall = ffi.C.CXCallingConv_X86ThisCall,
        CXCallingConv_X86Pascal = ffi.C.CXCallingConv_X86Pascal,
        CXCallingConv_AAPCS = ffi.C.CXCallingConv_AAPCS,
        CXCallingConv_AAPCS_VFP = ffi.C.CXCallingConv_AAPCS_VFP,
        CXCallingConv_X86RegCall = ffi.C.CXCallingConv_X86RegCall,
        CXCallingConv_IntelOclBicc = ffi.C.CXCallingConv_IntelOclBicc,
        CXCallingConv_Win64 = ffi.C.CXCallingConv_Win64,
        CXCallingConv_X86_64Win64 = ffi.C.CXCallingConv_X86_64Win64,
        CXCallingConv_X86_64SysV = ffi.C.CXCallingConv_X86_64SysV,
        CXCallingConv_X86VectorCall = ffi.C.CXCallingConv_X86VectorCall,
        CXCallingConv_Swift = ffi.C.CXCallingConv_Swift,
        CXCallingConv_PreserveMost = ffi.C.CXCallingConv_PreserveMost,
        CXCallingConv_PreserveAll = ffi.C.CXCallingConv_PreserveAll,
        CXCallingConv_AArch64VectorCall = ffi.C.CXCallingConv_AArch64VectorCall,
        CXCallingConv_Invalid = ffi.C.CXCallingConv_Invalid,
        CXCallingConv_Unexposed = ffi.C.CXCallingConv_Unexposed,
    },
    CXTemplateArgumentKind = {
        CXTemplateArgumentKind_Null = ffi.C.CXTemplateArgumentKind_Null,
        CXTemplateArgumentKind_Type = ffi.C.CXTemplateArgumentKind_Type,
        CXTemplateArgumentKind_Declaration = ffi.C.CXTemplateArgumentKind_Declaration,
        CXTemplateArgumentKind_NullPtr = ffi.C.CXTemplateArgumentKind_NullPtr,
        CXTemplateArgumentKind_Integral = ffi.C.CXTemplateArgumentKind_Integral,
        CXTemplateArgumentKind_Template = ffi.C.CXTemplateArgumentKind_Template,
        CXTemplateArgumentKind_TemplateExpansion = ffi.C.CXTemplateArgumentKind_TemplateExpansion,
        CXTemplateArgumentKind_Expression = ffi.C.CXTemplateArgumentKind_Expression,
        CXTemplateArgumentKind_Pack = ffi.C.CXTemplateArgumentKind_Pack,
        CXTemplateArgumentKind_Invalid = ffi.C.CXTemplateArgumentKind_Invalid,
    },
    CXTypeNullabilityKind = {
        CXTypeNullability_NonNull = ffi.C.CXTypeNullability_NonNull,
        CXTypeNullability_Nullable = ffi.C.CXTypeNullability_Nullable,
        CXTypeNullability_Unspecified = ffi.C.CXTypeNullability_Unspecified,
        CXTypeNullability_Invalid = ffi.C.CXTypeNullability_Invalid,
    },
    CXTypeLayoutError = {
        CXTypeLayoutError_Invalid = ffi.C.CXTypeLayoutError_Invalid,
        CXTypeLayoutError_Incomplete = ffi.C.CXTypeLayoutError_Incomplete,
        CXTypeLayoutError_Dependent = ffi.C.CXTypeLayoutError_Dependent,
        CXTypeLayoutError_NotConstantSize = ffi.C.CXTypeLayoutError_NotConstantSize,
        CXTypeLayoutError_InvalidFieldName = ffi.C.CXTypeLayoutError_InvalidFieldName,
        CXTypeLayoutError_Undeduced = ffi.C.CXTypeLayoutError_Undeduced,
    },
    CXRefQualifierKind = {
        CXRefQualifier_None = ffi.C.CXRefQualifier_None,
        CXRefQualifier_LValue = ffi.C.CXRefQualifier_LValue,
        CXRefQualifier_RValue = ffi.C.CXRefQualifier_RValue,
    },
    CX_CXXAccessSpecifier = {
        CX_CXXInvalidAccessSpecifier = ffi.C.CX_CXXInvalidAccessSpecifier,
        CX_CXXPublic = ffi.C.CX_CXXPublic,
        CX_CXXProtected = ffi.C.CX_CXXProtected,
        CX_CXXPrivate = ffi.C.CX_CXXPrivate,
    },
    CX_StorageClass = {
        CX_SC_Invalid = ffi.C.CX_SC_Invalid,
        CX_SC_None = ffi.C.CX_SC_None,
        CX_SC_Extern = ffi.C.CX_SC_Extern,
        CX_SC_Static = ffi.C.CX_SC_Static,
        CX_SC_PrivateExtern = ffi.C.CX_SC_PrivateExtern,
        CX_SC_OpenCLWorkGroupLocal = ffi.C.CX_SC_OpenCLWorkGroupLocal,
        CX_SC_Auto = ffi.C.CX_SC_Auto,
        CX_SC_Register = ffi.C.CX_SC_Register,
    },
    CXChildVisitResult = {
        CXChildVisit_Break = ffi.C.CXChildVisit_Break,
        CXChildVisit_Continue = ffi.C.CXChildVisit_Continue,
        CXChildVisit_Recurse = ffi.C.CXChildVisit_Recurse,
    },
    CXPrintingPolicyProperty = {
        CXPrintingPolicy_Indentation = ffi.C.CXPrintingPolicy_Indentation,
        CXPrintingPolicy_SuppressSpecifiers = ffi.C.CXPrintingPolicy_SuppressSpecifiers,
        CXPrintingPolicy_SuppressTagKeyword = ffi.C.CXPrintingPolicy_SuppressTagKeyword,
        CXPrintingPolicy_IncludeTagDefinition = ffi.C.CXPrintingPolicy_IncludeTagDefinition,
        CXPrintingPolicy_SuppressScope = ffi.C.CXPrintingPolicy_SuppressScope,
        CXPrintingPolicy_SuppressUnwrittenScope = ffi.C.CXPrintingPolicy_SuppressUnwrittenScope,
        CXPrintingPolicy_SuppressInitializers = ffi.C.CXPrintingPolicy_SuppressInitializers,
        CXPrintingPolicy_ConstantArraySizeAsWritten = ffi.C.CXPrintingPolicy_ConstantArraySizeAsWritten,
        CXPrintingPolicy_AnonymousTagLocations = ffi.C.CXPrintingPolicy_AnonymousTagLocations,
        CXPrintingPolicy_SuppressStrongLifetime = ffi.C.CXPrintingPolicy_SuppressStrongLifetime,
        CXPrintingPolicy_SuppressLifetimeQualifiers = ffi.C.CXPrintingPolicy_SuppressLifetimeQualifiers,
        CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors = ffi.C.CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors,
        CXPrintingPolicy_Bool = ffi.C.CXPrintingPolicy_Bool,
        CXPrintingPolicy_Restrict = ffi.C.CXPrintingPolicy_Restrict,
        CXPrintingPolicy_Alignof = ffi.C.CXPrintingPolicy_Alignof,
        CXPrintingPolicy_UnderscoreAlignof = ffi.C.CXPrintingPolicy_UnderscoreAlignof,
        CXPrintingPolicy_UseVoidForZeroParams = ffi.C.CXPrintingPolicy_UseVoidForZeroParams,
        CXPrintingPolicy_TerseOutput = ffi.C.CXPrintingPolicy_TerseOutput,
        CXPrintingPolicy_PolishForDeclaration = ffi.C.CXPrintingPolicy_PolishForDeclaration,
        CXPrintingPolicy_Half = ffi.C.CXPrintingPolicy_Half,
        CXPrintingPolicy_MSWChar = ffi.C.CXPrintingPolicy_MSWChar,
        CXPrintingPolicy_IncludeNewlines = ffi.C.CXPrintingPolicy_IncludeNewlines,
        CXPrintingPolicy_MSVCFormatting = ffi.C.CXPrintingPolicy_MSVCFormatting,
        CXPrintingPolicy_ConstantsAsWritten = ffi.C.CXPrintingPolicy_ConstantsAsWritten,
        CXPrintingPolicy_SuppressImplicitBase = ffi.C.CXPrintingPolicy_SuppressImplicitBase,
        CXPrintingPolicy_FullyQualifiedName = ffi.C.CXPrintingPolicy_FullyQualifiedName,
        CXPrintingPolicy_LastProperty = ffi.C.CXPrintingPolicy_LastProperty,
    },
    CXNameRefFlags = {
        CXNameRange_WantQualifier = ffi.C.CXNameRange_WantQualifier,
        CXNameRange_WantTemplateArgs = ffi.C.CXNameRange_WantTemplateArgs,
        CXNameRange_WantSinglePiece = ffi.C.CXNameRange_WantSinglePiece,
    },
    CXTokenKind = {
        CXToken_Punctuation = ffi.C.CXToken_Punctuation,
        CXToken_Keyword = ffi.C.CXToken_Keyword,
        CXToken_Identifier = ffi.C.CXToken_Identifier,
        CXToken_Literal = ffi.C.CXToken_Literal,
        CXToken_Comment = ffi.C.CXToken_Comment,
    },
    CXCompletionChunkKind = {
        CXCompletionChunk_Optional = ffi.C.CXCompletionChunk_Optional,
        CXCompletionChunk_TypedText = ffi.C.CXCompletionChunk_TypedText,
        CXCompletionChunk_Text = ffi.C.CXCompletionChunk_Text,
        CXCompletionChunk_Placeholder = ffi.C.CXCompletionChunk_Placeholder,
        CXCompletionChunk_Informative = ffi.C.CXCompletionChunk_Informative,
        CXCompletionChunk_CurrentParameter = ffi.C.CXCompletionChunk_CurrentParameter,
        CXCompletionChunk_LeftParen = ffi.C.CXCompletionChunk_LeftParen,
        CXCompletionChunk_RightParen = ffi.C.CXCompletionChunk_RightParen,
        CXCompletionChunk_LeftBracket = ffi.C.CXCompletionChunk_LeftBracket,
        CXCompletionChunk_RightBracket = ffi.C.CXCompletionChunk_RightBracket,
        CXCompletionChunk_LeftBrace = ffi.C.CXCompletionChunk_LeftBrace,
        CXCompletionChunk_RightBrace = ffi.C.CXCompletionChunk_RightBrace,
        CXCompletionChunk_LeftAngle = ffi.C.CXCompletionChunk_LeftAngle,
        CXCompletionChunk_RightAngle = ffi.C.CXCompletionChunk_RightAngle,
        CXCompletionChunk_Comma = ffi.C.CXCompletionChunk_Comma,
        CXCompletionChunk_ResultType = ffi.C.CXCompletionChunk_ResultType,
        CXCompletionChunk_Colon = ffi.C.CXCompletionChunk_Colon,
        CXCompletionChunk_SemiColon = ffi.C.CXCompletionChunk_SemiColon,
        CXCompletionChunk_Equal = ffi.C.CXCompletionChunk_Equal,
        CXCompletionChunk_HorizontalSpace = ffi.C.CXCompletionChunk_HorizontalSpace,
        CXCompletionChunk_VerticalSpace = ffi.C.CXCompletionChunk_VerticalSpace,
    },
    CXCodeComplete_Flags = {
        CXCodeComplete_IncludeMacros = ffi.C.CXCodeComplete_IncludeMacros,
        CXCodeComplete_IncludeCodePatterns = ffi.C.CXCodeComplete_IncludeCodePatterns,
        CXCodeComplete_IncludeBriefComments = ffi.C.CXCodeComplete_IncludeBriefComments,
        CXCodeComplete_SkipPreamble = ffi.C.CXCodeComplete_SkipPreamble,
        CXCodeComplete_IncludeCompletionsWithFixIts = ffi.C.CXCodeComplete_IncludeCompletionsWithFixIts,
    },
    CXCompletionContext = {
        CXCompletionContext_Unexposed = ffi.C.CXCompletionContext_Unexposed,
        CXCompletionContext_AnyType = ffi.C.CXCompletionContext_AnyType,
        CXCompletionContext_AnyValue = ffi.C.CXCompletionContext_AnyValue,
        CXCompletionContext_ObjCObjectValue = ffi.C.CXCompletionContext_ObjCObjectValue,
        CXCompletionContext_ObjCSelectorValue = ffi.C.CXCompletionContext_ObjCSelectorValue,
        CXCompletionContext_CXXClassTypeValue = ffi.C.CXCompletionContext_CXXClassTypeValue,
        CXCompletionContext_DotMemberAccess = ffi.C.CXCompletionContext_DotMemberAccess,
        CXCompletionContext_ArrowMemberAccess = ffi.C.CXCompletionContext_ArrowMemberAccess,
        CXCompletionContext_ObjCPropertyAccess = ffi.C.CXCompletionContext_ObjCPropertyAccess,
        CXCompletionContext_EnumTag = ffi.C.CXCompletionContext_EnumTag,
        CXCompletionContext_UnionTag = ffi.C.CXCompletionContext_UnionTag,
        CXCompletionContext_StructTag = ffi.C.CXCompletionContext_StructTag,
        CXCompletionContext_ClassTag = ffi.C.CXCompletionContext_ClassTag,
        CXCompletionContext_Namespace = ffi.C.CXCompletionContext_Namespace,
        CXCompletionContext_NestedNameSpecifier = ffi.C.CXCompletionContext_NestedNameSpecifier,
        CXCompletionContext_ObjCInterface = ffi.C.CXCompletionContext_ObjCInterface,
        CXCompletionContext_ObjCProtocol = ffi.C.CXCompletionContext_ObjCProtocol,
        CXCompletionContext_ObjCCategory = ffi.C.CXCompletionContext_ObjCCategory,
        CXCompletionContext_ObjCInstanceMessage = ffi.C.CXCompletionContext_ObjCInstanceMessage,
        CXCompletionContext_ObjCClassMessage = ffi.C.CXCompletionContext_ObjCClassMessage,
        CXCompletionContext_ObjCSelectorName = ffi.C.CXCompletionContext_ObjCSelectorName,
        CXCompletionContext_MacroName = ffi.C.CXCompletionContext_MacroName,
        CXCompletionContext_NaturalLanguage = ffi.C.CXCompletionContext_NaturalLanguage,
        CXCompletionContext_IncludedFile = ffi.C.CXCompletionContext_IncludedFile,
        CXCompletionContext_Unknown = ffi.C.CXCompletionContext_Unknown,
    },
    CXVisitorResult = {
        CXVisit_Break = ffi.C.CXVisit_Break,
        CXVisit_Continue = ffi.C.CXVisit_Continue,
    },
}
---@class __time64_t
---@class time_t
---@class CXString
---@class CXStringSet
---@class size_t
---@class CXIndex
---@class CXFile
---@class CXFileUniqueID
---@class CXTranslationUnitImpl
---@class CXTranslationUnit
---@class CXSourceLocation
---@class CXSourceRange
---@class CXSourceRangeList
---@class CXDiagnosticSet
---@class CXDiagnostic
---@class CXUnsavedFile
---@class CXTUResourceUsageEntry
---@class CXTUResourceUsageEntry
---@class CXTUResourceUsage
---@class CXTUResourceUsage
---@class CXTargetInfoImpl
---@class CXTargetInfo
---@class CXCursor
---@class CXVersion
---@class CXVersion
---@class CXPlatformAvailability
---@class CXPlatformAvailability
---@class CXCursorSetImpl
---@class CXCursorSet
---@class CXType
---@class CXClientData
---@class CXCursorVisitor
---@class CXPrintingPolicy
---@class CXModule
---@class CXToken
---@class CXTokenKind
---@class CXCompletionString
---@class CXCompletionResult
---@class CXCodeCompleteResults
---@class CXInclusionVisitor
---@class CXEvalResult
---@class CXEvalResultKind
---@class CXRemapping
---@class CXResult
---@class CXCursorAndRangeVisitor
---@class CXCursorAndRangeVisitor
---@class CXIdxEntityKind
---@class CXIdxEntityCXXTemplateKind
---@class CXIdxEntityLanguage
---@class CXIdxAttrKind
---@class CXIdxLoc
---@class CXIdxAttrInfo
---@class CXIdxEntityInfo
---@class CXIdxContainerInfo
---@class CXIdxDeclInfo
---@class CXIdxObjCContainerKind
---@class CXIdxObjCContainerDeclInfo
---@class CXIdxBaseClassInfo
---@class CXIdxObjCProtocolRefInfo
---@class CXIdxObjCProtocolRefListInfo
---@class CXIdxObjCInterfaceDeclInfo
---@class CXIdxObjCCategoryDeclInfo
---@class CXIdxObjCPropertyDeclInfo
---@class CXIdxIBOutletCollectionAttrInfo
---@class CXIdxCXXClassDeclInfo
---@class CXIdxClientContainer
---@class CXIdxClientEntity
---@class CXIndexAction
---@class CXIdxClientFile
---@class CXIdxIncludedFileInfo
---@class CXIdxClientASTFile
---@class CXIdxImportedASTFileInfo
---@class CXIdxEntityRefKind
---@class CXSymbolRole
---@class CXIdxEntityRefInfo
---@class IndexerCallbacks
---@class CXFieldVisitor
-----------------------------------------------------------------------------
-- libclang.dll
-----------------------------------------------------------------------------
local clang = ffi.load('libclang')
M.cache.clang = clang
M.libs.clang = {
    ---@type fun(string:CXString):string
    clang_getCString = clang.clang_getCString,
    ---@type fun(string:CXString):
    clang_disposeString = clang.clang_disposeString,
    ---@type fun(set:cdata):
    clang_disposeStringSet = clang.clang_disposeStringSet,
    ---@type fun(excludeDeclarationsFromPCH:integer, displayDiagnostics:integer):CXIndex
    clang_createIndex = clang.clang_createIndex,
    ---@type fun(index:CXIndex):
    clang_disposeIndex = clang.clang_disposeIndex,
    ---@type fun(param1:CXIndex, options:integer):
    clang_CXIndex_setGlobalOptions = clang.clang_CXIndex_setGlobalOptions,
    ---@type fun(param1:CXIndex):integer
    clang_CXIndex_getGlobalOptions = clang.clang_CXIndex_getGlobalOptions,
    ---@type fun(param1:CXIndex, Path:string):
    clang_CXIndex_setInvocationEmissionPathOption = clang.clang_CXIndex_setInvocationEmissionPathOption,
    ---@type fun(SFile:CXFile):CXString
    clang_getFileName = clang.clang_getFileName,
    ---@type fun(SFile:CXFile):time_t
    clang_getFileTime = clang.clang_getFileTime,
    ---@type fun(file:CXFile, outID:cdata):integer
    clang_getFileUniqueID = clang.clang_getFileUniqueID,
    ---@type fun(tu:CXTranslationUnit, file:CXFile):integer
    clang_isFileMultipleIncludeGuarded = clang.clang_isFileMultipleIncludeGuarded,
    ---@type fun(tu:CXTranslationUnit, file_name:string):CXFile
    clang_getFile = clang.clang_getFile,
    ---@type fun(tu:CXTranslationUnit, file:CXFile, size:cdata):string
    clang_getFileContents = clang.clang_getFileContents,
    ---@type fun(file1:CXFile, file2:CXFile):integer
    clang_File_isEqual = clang.clang_File_isEqual,
    ---@type fun(file:CXFile):CXString
    clang_File_tryGetRealPathName = clang.clang_File_tryGetRealPathName,
    ---@type fun():CXSourceLocation
    clang_getNullLocation = clang.clang_getNullLocation,
    ---@type fun(loc1:CXSourceLocation, loc2:CXSourceLocation):integer
    clang_equalLocations = clang.clang_equalLocations,
    ---@type fun(tu:CXTranslationUnit, file:CXFile, line:integer, column:integer):CXSourceLocation
    clang_getLocation = clang.clang_getLocation,
    ---@type fun(tu:CXTranslationUnit, file:CXFile, offset:integer):CXSourceLocation
    clang_getLocationForOffset = clang.clang_getLocationForOffset,
    ---@type fun(location:CXSourceLocation):integer
    clang_Location_isInSystemHeader = clang.clang_Location_isInSystemHeader,
    ---@type fun(location:CXSourceLocation):integer
    clang_Location_isFromMainFile = clang.clang_Location_isFromMainFile,
    ---@type fun():CXSourceRange
    clang_getNullRange = clang.clang_getNullRange,
    ---@type fun(begin:CXSourceLocation, end_:CXSourceLocation):CXSourceRange
    clang_getRange = clang.clang_getRange,
    ---@type fun(range1:CXSourceRange, range2:CXSourceRange):integer
    clang_equalRanges = clang.clang_equalRanges,
    ---@type fun(range:CXSourceRange):integer
    clang_Range_isNull = clang.clang_Range_isNull,
    ---@type fun(location:CXSourceLocation, file:cdata, line:cdata, column:cdata, offset:cdata):
    clang_getExpansionLocation = clang.clang_getExpansionLocation,
    ---@type fun(location:CXSourceLocation, filename:cdata, line:cdata, column:cdata):
    clang_getPresumedLocation = clang.clang_getPresumedLocation,
    ---@type fun(location:CXSourceLocation, file:cdata, line:cdata, column:cdata, offset:cdata):
    clang_getInstantiationLocation = clang.clang_getInstantiationLocation,
    ---@type fun(location:CXSourceLocation, file:cdata, line:cdata, column:cdata, offset:cdata):
    clang_getSpellingLocation = clang.clang_getSpellingLocation,
    ---@type fun(location:CXSourceLocation, file:cdata, line:cdata, column:cdata, offset:cdata):
    clang_getFileLocation = clang.clang_getFileLocation,
    ---@type fun(range:CXSourceRange):CXSourceLocation
    clang_getRangeStart = clang.clang_getRangeStart,
    ---@type fun(range:CXSourceRange):CXSourceLocation
    clang_getRangeEnd = clang.clang_getRangeEnd,
    ---@type fun(tu:CXTranslationUnit, file:CXFile):cdata
    clang_getSkippedRanges = clang.clang_getSkippedRanges,
    ---@type fun(tu:CXTranslationUnit):cdata
    clang_getAllSkippedRanges = clang.clang_getAllSkippedRanges,
    ---@type fun(ranges:cdata):
    clang_disposeSourceRangeList = clang.clang_disposeSourceRangeList,
    ---@type fun(Diags:CXDiagnosticSet):integer
    clang_getNumDiagnosticsInSet = clang.clang_getNumDiagnosticsInSet,
    ---@type fun(Diags:CXDiagnosticSet, Index:integer):CXDiagnostic
    clang_getDiagnosticInSet = clang.clang_getDiagnosticInSet,
    ---@type fun(file:string, error:cdata, errorString:cdata):CXDiagnosticSet
    clang_loadDiagnostics = clang.clang_loadDiagnostics,
    ---@type fun(Diags:CXDiagnosticSet):
    clang_disposeDiagnosticSet = clang.clang_disposeDiagnosticSet,
    ---@type fun(D:CXDiagnostic):CXDiagnosticSet
    clang_getChildDiagnostics = clang.clang_getChildDiagnostics,
    ---@type fun(Unit:CXTranslationUnit):integer
    clang_getNumDiagnostics = clang.clang_getNumDiagnostics,
    ---@type fun(Unit:CXTranslationUnit, Index:integer):CXDiagnostic
    clang_getDiagnostic = clang.clang_getDiagnostic,
    ---@type fun(Unit:CXTranslationUnit):CXDiagnosticSet
    clang_getDiagnosticSetFromTU = clang.clang_getDiagnosticSetFromTU,
    ---@type fun(Diagnostic:CXDiagnostic):
    clang_disposeDiagnostic = clang.clang_disposeDiagnostic,
    ---@type fun(Diagnostic:CXDiagnostic, Options:integer):CXString
    clang_formatDiagnostic = clang.clang_formatDiagnostic,
    ---@type fun():integer
    clang_defaultDiagnosticDisplayOptions = clang.clang_defaultDiagnosticDisplayOptions,
    ---@type fun(param1:CXDiagnostic):CXDiagnosticSeverity
    clang_getDiagnosticSeverity = clang.clang_getDiagnosticSeverity,
    ---@type fun(param1:CXDiagnostic):CXSourceLocation
    clang_getDiagnosticLocation = clang.clang_getDiagnosticLocation,
    ---@type fun(param1:CXDiagnostic):CXString
    clang_getDiagnosticSpelling = clang.clang_getDiagnosticSpelling,
    ---@type fun(Diag:CXDiagnostic, Disable:cdata):CXString
    clang_getDiagnosticOption = clang.clang_getDiagnosticOption,
    ---@type fun(param1:CXDiagnostic):integer
    clang_getDiagnosticCategory = clang.clang_getDiagnosticCategory,
    ---@type fun(Category:integer):CXString
    clang_getDiagnosticCategoryName = clang.clang_getDiagnosticCategoryName,
    ---@type fun(param1:CXDiagnostic):CXString
    clang_getDiagnosticCategoryText = clang.clang_getDiagnosticCategoryText,
    ---@type fun(param1:CXDiagnostic):integer
    clang_getDiagnosticNumRanges = clang.clang_getDiagnosticNumRanges,
    ---@type fun(Diagnostic:CXDiagnostic, Range:integer):CXSourceRange
    clang_getDiagnosticRange = clang.clang_getDiagnosticRange,
    ---@type fun(Diagnostic:CXDiagnostic):integer
    clang_getDiagnosticNumFixIts = clang.clang_getDiagnosticNumFixIts,
    ---@type fun(Diagnostic:CXDiagnostic, FixIt:integer, ReplacementRange:cdata):CXString
    clang_getDiagnosticFixIt = clang.clang_getDiagnosticFixIt,
    ---@type fun(CTUnit:CXTranslationUnit):CXString
    clang_getTranslationUnitSpelling = clang.clang_getTranslationUnitSpelling,
    ---@type fun(CIdx:CXIndex, source_filename:string, num_clang_command_line_args:integer, clang_command_line_args:cdata, num_unsaved_files:integer, unsaved_files:cdata):CXTranslationUnit
    clang_createTranslationUnitFromSourceFile = clang.clang_createTranslationUnitFromSourceFile,
    ---@type fun(CIdx:CXIndex, ast_filename:string):CXTranslationUnit
    clang_createTranslationUnit = clang.clang_createTranslationUnit,
    ---@type fun(CIdx:CXIndex, ast_filename:string, out_TU:cdata):CXErrorCode
    clang_createTranslationUnit2 = clang.clang_createTranslationUnit2,
    ---@type fun():integer
    clang_defaultEditingTranslationUnitOptions = clang.clang_defaultEditingTranslationUnitOptions,
    ---@type fun(CIdx:CXIndex, source_filename:string, command_line_args:cdata, num_command_line_args:integer, unsaved_files:cdata, num_unsaved_files:integer, options:integer):CXTranslationUnit
    clang_parseTranslationUnit = clang.clang_parseTranslationUnit,
    ---@type fun(CIdx:CXIndex, source_filename:string, command_line_args:cdata, num_command_line_args:integer, unsaved_files:cdata, num_unsaved_files:integer, options:integer, out_TU:cdata):CXErrorCode
    clang_parseTranslationUnit2 = clang.clang_parseTranslationUnit2,
    ---@type fun(CIdx:CXIndex, source_filename:string, command_line_args:cdata, num_command_line_args:integer, unsaved_files:cdata, num_unsaved_files:integer, options:integer, out_TU:cdata):CXErrorCode
    clang_parseTranslationUnit2FullArgv = clang.clang_parseTranslationUnit2FullArgv,
    ---@type fun(TU:CXTranslationUnit):integer
    clang_defaultSaveOptions = clang.clang_defaultSaveOptions,
    ---@type fun(TU:CXTranslationUnit, FileName:string, options:integer):integer
    clang_saveTranslationUnit = clang.clang_saveTranslationUnit,
    ---@type fun(param1:CXTranslationUnit):integer
    clang_suspendTranslationUnit = clang.clang_suspendTranslationUnit,
    ---@type fun(param1:CXTranslationUnit):
    clang_disposeTranslationUnit = clang.clang_disposeTranslationUnit,
    ---@type fun(TU:CXTranslationUnit):integer
    clang_defaultReparseOptions = clang.clang_defaultReparseOptions,
    ---@type fun(TU:CXTranslationUnit, num_unsaved_files:integer, unsaved_files:cdata, options:integer):integer
    clang_reparseTranslationUnit = clang.clang_reparseTranslationUnit,
    ---@type fun(kind:CXTUResourceUsageKind):string
    clang_getTUResourceUsageName = clang.clang_getTUResourceUsageName,
    ---@type fun(TU:CXTranslationUnit):CXTUResourceUsage
    clang_getCXTUResourceUsage = clang.clang_getCXTUResourceUsage,
    ---@type fun(usage:CXTUResourceUsage):
    clang_disposeCXTUResourceUsage = clang.clang_disposeCXTUResourceUsage,
    ---@type fun(CTUnit:CXTranslationUnit):CXTargetInfo
    clang_getTranslationUnitTargetInfo = clang.clang_getTranslationUnitTargetInfo,
    ---@type fun(Info:CXTargetInfo):
    clang_TargetInfo_dispose = clang.clang_TargetInfo_dispose,
    ---@type fun(Info:CXTargetInfo):CXString
    clang_TargetInfo_getTriple = clang.clang_TargetInfo_getTriple,
    ---@type fun(Info:CXTargetInfo):integer
    clang_TargetInfo_getPointerWidth = clang.clang_TargetInfo_getPointerWidth,
    ---@type fun():CXCursor
    clang_getNullCursor = clang.clang_getNullCursor,
    ---@type fun(param1:CXTranslationUnit):CXCursor
    clang_getTranslationUnitCursor = clang.clang_getTranslationUnitCursor,
    ---@type fun(param1:CXCursor, param2:CXCursor):integer
    clang_equalCursors = clang.clang_equalCursors,
    ---@type fun(cursor:CXCursor):integer
    clang_Cursor_isNull = clang.clang_Cursor_isNull,
    ---@type fun(param1:CXCursor):integer
    clang_hashCursor = clang.clang_hashCursor,
    ---@type fun(param1:CXCursor):CXCursorKind
    clang_getCursorKind = clang.clang_getCursorKind,
    ---@type fun(param1:CXCursorKind):integer
    clang_isDeclaration = clang.clang_isDeclaration,
    ---@type fun(param1:CXCursor):integer
    clang_isInvalidDeclaration = clang.clang_isInvalidDeclaration,
    ---@type fun(param1:CXCursorKind):integer
    clang_isReference = clang.clang_isReference,
    ---@type fun(param1:CXCursorKind):integer
    clang_isExpression = clang.clang_isExpression,
    ---@type fun(param1:CXCursorKind):integer
    clang_isStatement = clang.clang_isStatement,
    ---@type fun(param1:CXCursorKind):integer
    clang_isAttribute = clang.clang_isAttribute,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_hasAttrs = clang.clang_Cursor_hasAttrs,
    ---@type fun(param1:CXCursorKind):integer
    clang_isInvalid = clang.clang_isInvalid,
    ---@type fun(param1:CXCursorKind):integer
    clang_isTranslationUnit = clang.clang_isTranslationUnit,
    ---@type fun(param1:CXCursorKind):integer
    clang_isPreprocessing = clang.clang_isPreprocessing,
    ---@type fun(param1:CXCursorKind):integer
    clang_isUnexposed = clang.clang_isUnexposed,
    ---@type fun(cursor:CXCursor):CXLinkageKind
    clang_getCursorLinkage = clang.clang_getCursorLinkage,
    ---@type fun(cursor:CXCursor):CXVisibilityKind
    clang_getCursorVisibility = clang.clang_getCursorVisibility,
    ---@type fun(cursor:CXCursor):CXAvailabilityKind
    clang_getCursorAvailability = clang.clang_getCursorAvailability,
    ---@type fun(cursor:CXCursor, always_deprecated:cdata, deprecated_message:cdata, always_unavailable:cdata, unavailable_message:cdata, availability:cdata, availability_size:integer):integer
    clang_getCursorPlatformAvailability = clang.clang_getCursorPlatformAvailability,
    ---@type fun(availability:cdata):
    clang_disposeCXPlatformAvailability = clang.clang_disposeCXPlatformAvailability,
    ---@type fun(cursor:CXCursor):CXLanguageKind
    clang_getCursorLanguage = clang.clang_getCursorLanguage,
    ---@type fun(cursor:CXCursor):CXTLSKind
    clang_getCursorTLSKind = clang.clang_getCursorTLSKind,
    ---@type fun(param1:CXCursor):CXTranslationUnit
    clang_Cursor_getTranslationUnit = clang.clang_Cursor_getTranslationUnit,
    ---@type fun():CXCursorSet
    clang_createCXCursorSet = clang.clang_createCXCursorSet,
    ---@type fun(cset:CXCursorSet):
    clang_disposeCXCursorSet = clang.clang_disposeCXCursorSet,
    ---@type fun(cset:CXCursorSet, cursor:CXCursor):integer
    clang_CXCursorSet_contains = clang.clang_CXCursorSet_contains,
    ---@type fun(cset:CXCursorSet, cursor:CXCursor):integer
    clang_CXCursorSet_insert = clang.clang_CXCursorSet_insert,
    ---@type fun(cursor:CXCursor):CXCursor
    clang_getCursorSemanticParent = clang.clang_getCursorSemanticParent,
    ---@type fun(cursor:CXCursor):CXCursor
    clang_getCursorLexicalParent = clang.clang_getCursorLexicalParent,
    ---@type fun(cursor:CXCursor, overridden:cdata, num_overridden:cdata):
    clang_getOverriddenCursors = clang.clang_getOverriddenCursors,
    ---@type fun(overridden:cdata):
    clang_disposeOverriddenCursors = clang.clang_disposeOverriddenCursors,
    ---@type fun(cursor:CXCursor):CXFile
    clang_getIncludedFile = clang.clang_getIncludedFile,
    ---@type fun(param1:CXTranslationUnit, param2:CXSourceLocation):CXCursor
    clang_getCursor = clang.clang_getCursor,
    ---@type fun(param1:CXCursor):CXSourceLocation
    clang_getCursorLocation = clang.clang_getCursorLocation,
    ---@type fun(param1:CXCursor):CXSourceRange
    clang_getCursorExtent = clang.clang_getCursorExtent,
    ---@type fun(C:CXCursor):CXType
    clang_getCursorType = clang.clang_getCursorType,
    ---@type fun(CT:CXType):CXString
    clang_getTypeSpelling = clang.clang_getTypeSpelling,
    ---@type fun(C:CXCursor):CXType
    clang_getTypedefDeclUnderlyingType = clang.clang_getTypedefDeclUnderlyingType,
    ---@type fun(C:CXCursor):CXType
    clang_getEnumDeclIntegerType = clang.clang_getEnumDeclIntegerType,
    ---@type fun(C:CXCursor):integer
    clang_getEnumConstantDeclValue = clang.clang_getEnumConstantDeclValue,
    ---@type fun(C:CXCursor):integer
    clang_getEnumConstantDeclUnsignedValue = clang.clang_getEnumConstantDeclUnsignedValue,
    ---@type fun(C:CXCursor):integer
    clang_getFieldDeclBitWidth = clang.clang_getFieldDeclBitWidth,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_getNumArguments = clang.clang_Cursor_getNumArguments,
    ---@type fun(C:CXCursor, i:integer):CXCursor
    clang_Cursor_getArgument = clang.clang_Cursor_getArgument,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_getNumTemplateArguments = clang.clang_Cursor_getNumTemplateArguments,
    ---@type fun(C:CXCursor, I:integer):CXTemplateArgumentKind
    clang_Cursor_getTemplateArgumentKind = clang.clang_Cursor_getTemplateArgumentKind,
    ---@type fun(C:CXCursor, I:integer):CXType
    clang_Cursor_getTemplateArgumentType = clang.clang_Cursor_getTemplateArgumentType,
    ---@type fun(C:CXCursor, I:integer):integer
    clang_Cursor_getTemplateArgumentValue = clang.clang_Cursor_getTemplateArgumentValue,
    ---@type fun(C:CXCursor, I:integer):integer
    clang_Cursor_getTemplateArgumentUnsignedValue = clang.clang_Cursor_getTemplateArgumentUnsignedValue,
    ---@type fun(A:CXType, B:CXType):integer
    clang_equalTypes = clang.clang_equalTypes,
    ---@type fun(T:CXType):CXType
    clang_getCanonicalType = clang.clang_getCanonicalType,
    ---@type fun(T:CXType):integer
    clang_isConstQualifiedType = clang.clang_isConstQualifiedType,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isMacroFunctionLike = clang.clang_Cursor_isMacroFunctionLike,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isMacroBuiltin = clang.clang_Cursor_isMacroBuiltin,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isFunctionInlined = clang.clang_Cursor_isFunctionInlined,
    ---@type fun(T:CXType):integer
    clang_isVolatileQualifiedType = clang.clang_isVolatileQualifiedType,
    ---@type fun(T:CXType):integer
    clang_isRestrictQualifiedType = clang.clang_isRestrictQualifiedType,
    ---@type fun(T:CXType):integer
    clang_getAddressSpace = clang.clang_getAddressSpace,
    ---@type fun(CT:CXType):CXString
    clang_getTypedefName = clang.clang_getTypedefName,
    ---@type fun(T:CXType):CXType
    clang_getPointeeType = clang.clang_getPointeeType,
    ---@type fun(T:CXType):CXCursor
    clang_getTypeDeclaration = clang.clang_getTypeDeclaration,
    ---@type fun(C:CXCursor):CXString
    clang_getDeclObjCTypeEncoding = clang.clang_getDeclObjCTypeEncoding,
    ---@type fun(type:CXType):CXString
    clang_Type_getObjCEncoding = clang.clang_Type_getObjCEncoding,
    ---@type fun(K:CXTypeKind):CXString
    clang_getTypeKindSpelling = clang.clang_getTypeKindSpelling,
    ---@type fun(T:CXType):CXCallingConv
    clang_getFunctionTypeCallingConv = clang.clang_getFunctionTypeCallingConv,
    ---@type fun(T:CXType):CXType
    clang_getResultType = clang.clang_getResultType,
    ---@type fun(T:CXType):integer
    clang_getExceptionSpecificationType = clang.clang_getExceptionSpecificationType,
    ---@type fun(T:CXType):integer
    clang_getNumArgTypes = clang.clang_getNumArgTypes,
    ---@type fun(T:CXType, i:integer):CXType
    clang_getArgType = clang.clang_getArgType,
    ---@type fun(T:CXType):CXType
    clang_Type_getObjCObjectBaseType = clang.clang_Type_getObjCObjectBaseType,
    ---@type fun(T:CXType):integer
    clang_Type_getNumObjCProtocolRefs = clang.clang_Type_getNumObjCProtocolRefs,
    ---@type fun(T:CXType, i:integer):CXCursor
    clang_Type_getObjCProtocolDecl = clang.clang_Type_getObjCProtocolDecl,
    ---@type fun(T:CXType):integer
    clang_Type_getNumObjCTypeArgs = clang.clang_Type_getNumObjCTypeArgs,
    ---@type fun(T:CXType, i:integer):CXType
    clang_Type_getObjCTypeArg = clang.clang_Type_getObjCTypeArg,
    ---@type fun(T:CXType):integer
    clang_isFunctionTypeVariadic = clang.clang_isFunctionTypeVariadic,
    ---@type fun(C:CXCursor):CXType
    clang_getCursorResultType = clang.clang_getCursorResultType,
    ---@type fun(C:CXCursor):integer
    clang_getCursorExceptionSpecificationType = clang.clang_getCursorExceptionSpecificationType,
    ---@type fun(T:CXType):integer
    clang_isPODType = clang.clang_isPODType,
    ---@type fun(T:CXType):CXType
    clang_getElementType = clang.clang_getElementType,
    ---@type fun(T:CXType):integer
    clang_getNumElements = clang.clang_getNumElements,
    ---@type fun(T:CXType):CXType
    clang_getArrayElementType = clang.clang_getArrayElementType,
    ---@type fun(T:CXType):integer
    clang_getArraySize = clang.clang_getArraySize,
    ---@type fun(T:CXType):CXType
    clang_Type_getNamedType = clang.clang_Type_getNamedType,
    ---@type fun(T:CXType):integer
    clang_Type_isTransparentTagTypedef = clang.clang_Type_isTransparentTagTypedef,
    ---@type fun(T:CXType):CXTypeNullabilityKind
    clang_Type_getNullability = clang.clang_Type_getNullability,
    ---@type fun(T:CXType):integer
    clang_Type_getAlignOf = clang.clang_Type_getAlignOf,
    ---@type fun(T:CXType):CXType
    clang_Type_getClassType = clang.clang_Type_getClassType,
    ---@type fun(T:CXType):integer
    clang_Type_getSizeOf = clang.clang_Type_getSizeOf,
    ---@type fun(T:CXType, S:string):integer
    clang_Type_getOffsetOf = clang.clang_Type_getOffsetOf,
    ---@type fun(T:CXType):CXType
    clang_Type_getModifiedType = clang.clang_Type_getModifiedType,
    ---@type fun(CT:CXType):CXType
    clang_Type_getValueType = clang.clang_Type_getValueType,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_getOffsetOfField = clang.clang_Cursor_getOffsetOfField,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isAnonymous = clang.clang_Cursor_isAnonymous,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isAnonymousRecordDecl = clang.clang_Cursor_isAnonymousRecordDecl,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isInlineNamespace = clang.clang_Cursor_isInlineNamespace,
    ---@type fun(T:CXType):integer
    clang_Type_getNumTemplateArguments = clang.clang_Type_getNumTemplateArguments,
    ---@type fun(T:CXType, i:integer):CXType
    clang_Type_getTemplateArgumentAsType = clang.clang_Type_getTemplateArgumentAsType,
    ---@type fun(T:CXType):CXRefQualifierKind
    clang_Type_getCXXRefQualifier = clang.clang_Type_getCXXRefQualifier,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isBitField = clang.clang_Cursor_isBitField,
    ---@type fun(param1:CXCursor):integer
    clang_isVirtualBase = clang.clang_isVirtualBase,
    ---@type fun(param1:CXCursor):CX_CXXAccessSpecifier
    clang_getCXXAccessSpecifier = clang.clang_getCXXAccessSpecifier,
    ---@type fun(param1:CXCursor):CX_StorageClass
    clang_Cursor_getStorageClass = clang.clang_Cursor_getStorageClass,
    ---@type fun(cursor:CXCursor):integer
    clang_getNumOverloadedDecls = clang.clang_getNumOverloadedDecls,
    ---@type fun(cursor:CXCursor, index:integer):CXCursor
    clang_getOverloadedDecl = clang.clang_getOverloadedDecl,
    ---@type fun(param1:CXCursor):CXType
    clang_getIBOutletCollectionType = clang.clang_getIBOutletCollectionType,
    ---@type fun(parent:CXCursor, visitor:CXCursorVisitor, client_data:CXClientData):integer
    clang_visitChildren = clang.clang_visitChildren,
    ---@type fun(param1:CXCursor):CXString
    clang_getCursorUSR = clang.clang_getCursorUSR,
    ---@type fun(class_name:string):CXString
    clang_constructUSR_ObjCClass = clang.clang_constructUSR_ObjCClass,
    ---@type fun(class_name:string, category_name:string):CXString
    clang_constructUSR_ObjCCategory = clang.clang_constructUSR_ObjCCategory,
    ---@type fun(protocol_name:string):CXString
    clang_constructUSR_ObjCProtocol = clang.clang_constructUSR_ObjCProtocol,
    ---@type fun(name:string, classUSR:CXString):CXString
    clang_constructUSR_ObjCIvar = clang.clang_constructUSR_ObjCIvar,
    ---@type fun(name:string, isInstanceMethod:integer, classUSR:CXString):CXString
    clang_constructUSR_ObjCMethod = clang.clang_constructUSR_ObjCMethod,
    ---@type fun(property:string, classUSR:CXString):CXString
    clang_constructUSR_ObjCProperty = clang.clang_constructUSR_ObjCProperty,
    ---@type fun(param1:CXCursor):CXString
    clang_getCursorSpelling = clang.clang_getCursorSpelling,
    ---@type fun(param1:CXCursor, pieceIndex:integer, options:integer):CXSourceRange
    clang_Cursor_getSpellingNameRange = clang.clang_Cursor_getSpellingNameRange,
    ---@type fun(Policy:CXPrintingPolicy, Property:CXPrintingPolicyProperty):integer
    clang_PrintingPolicy_getProperty = clang.clang_PrintingPolicy_getProperty,
    ---@type fun(Policy:CXPrintingPolicy, Property:CXPrintingPolicyProperty, Value:integer):
    clang_PrintingPolicy_setProperty = clang.clang_PrintingPolicy_setProperty,
    ---@type fun(param1:CXCursor):CXPrintingPolicy
    clang_getCursorPrintingPolicy = clang.clang_getCursorPrintingPolicy,
    ---@type fun(Policy:CXPrintingPolicy):
    clang_PrintingPolicy_dispose = clang.clang_PrintingPolicy_dispose,
    ---@type fun(Cursor:CXCursor, Policy:CXPrintingPolicy):CXString
    clang_getCursorPrettyPrinted = clang.clang_getCursorPrettyPrinted,
    ---@type fun(param1:CXCursor):CXString
    clang_getCursorDisplayName = clang.clang_getCursorDisplayName,
    ---@type fun(param1:CXCursor):CXCursor
    clang_getCursorReferenced = clang.clang_getCursorReferenced,
    ---@type fun(param1:CXCursor):CXCursor
    clang_getCursorDefinition = clang.clang_getCursorDefinition,
    ---@type fun(param1:CXCursor):integer
    clang_isCursorDefinition = clang.clang_isCursorDefinition,
    ---@type fun(param1:CXCursor):CXCursor
    clang_getCanonicalCursor = clang.clang_getCanonicalCursor,
    ---@type fun(param1:CXCursor):integer
    clang_Cursor_getObjCSelectorIndex = clang.clang_Cursor_getObjCSelectorIndex,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isDynamicCall = clang.clang_Cursor_isDynamicCall,
    ---@type fun(C:CXCursor):CXType
    clang_Cursor_getReceiverType = clang.clang_Cursor_getReceiverType,
    ---@type fun(C:CXCursor, reserved:integer):integer
    clang_Cursor_getObjCPropertyAttributes = clang.clang_Cursor_getObjCPropertyAttributes,
    ---@type fun(C:CXCursor):CXString
    clang_Cursor_getObjCPropertyGetterName = clang.clang_Cursor_getObjCPropertyGetterName,
    ---@type fun(C:CXCursor):CXString
    clang_Cursor_getObjCPropertySetterName = clang.clang_Cursor_getObjCPropertySetterName,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_getObjCDeclQualifiers = clang.clang_Cursor_getObjCDeclQualifiers,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isObjCOptional = clang.clang_Cursor_isObjCOptional,
    ---@type fun(C:CXCursor):integer
    clang_Cursor_isVariadic = clang.clang_Cursor_isVariadic,
    ---@type fun(C:CXCursor, language:cdata, definedIn:cdata, isGenerated:cdata):integer
    clang_Cursor_isExternalSymbol = clang.clang_Cursor_isExternalSymbol,
    ---@type fun(C:CXCursor):CXSourceRange
    clang_Cursor_getCommentRange = clang.clang_Cursor_getCommentRange,
    ---@type fun(C:CXCursor):CXString
    clang_Cursor_getRawCommentText = clang.clang_Cursor_getRawCommentText,
    ---@type fun(C:CXCursor):CXString
    clang_Cursor_getBriefCommentText = clang.clang_Cursor_getBriefCommentText,
    ---@type fun(param1:CXCursor):CXString
    clang_Cursor_getMangling = clang.clang_Cursor_getMangling,
    ---@type fun(param1:CXCursor):cdata
    clang_Cursor_getCXXManglings = clang.clang_Cursor_getCXXManglings,
    ---@type fun(param1:CXCursor):cdata
    clang_Cursor_getObjCManglings = clang.clang_Cursor_getObjCManglings,
    ---@type fun(C:CXCursor):CXModule
    clang_Cursor_getModule = clang.clang_Cursor_getModule,
    ---@type fun(param1:CXTranslationUnit, param2:CXFile):CXModule
    clang_getModuleForFile = clang.clang_getModuleForFile,
    ---@type fun(Module:CXModule):CXFile
    clang_Module_getASTFile = clang.clang_Module_getASTFile,
    ---@type fun(Module:CXModule):CXModule
    clang_Module_getParent = clang.clang_Module_getParent,
    ---@type fun(Module:CXModule):CXString
    clang_Module_getName = clang.clang_Module_getName,
    ---@type fun(Module:CXModule):CXString
    clang_Module_getFullName = clang.clang_Module_getFullName,
    ---@type fun(Module:CXModule):integer
    clang_Module_isSystem = clang.clang_Module_isSystem,
    ---@type fun(param1:CXTranslationUnit, Module:CXModule):integer
    clang_Module_getNumTopLevelHeaders = clang.clang_Module_getNumTopLevelHeaders,
    ---@type fun(param1:CXTranslationUnit, Module:CXModule, Index:integer):CXFile
    clang_Module_getTopLevelHeader = clang.clang_Module_getTopLevelHeader,
    ---@type fun(C:CXCursor):integer
    clang_CXXConstructor_isConvertingConstructor = clang.clang_CXXConstructor_isConvertingConstructor,
    ---@type fun(C:CXCursor):integer
    clang_CXXConstructor_isCopyConstructor = clang.clang_CXXConstructor_isCopyConstructor,
    ---@type fun(C:CXCursor):integer
    clang_CXXConstructor_isDefaultConstructor = clang.clang_CXXConstructor_isDefaultConstructor,
    ---@type fun(C:CXCursor):integer
    clang_CXXConstructor_isMoveConstructor = clang.clang_CXXConstructor_isMoveConstructor,
    ---@type fun(C:CXCursor):integer
    clang_CXXField_isMutable = clang.clang_CXXField_isMutable,
    ---@type fun(C:CXCursor):integer
    clang_CXXMethod_isDefaulted = clang.clang_CXXMethod_isDefaulted,
    ---@type fun(C:CXCursor):integer
    clang_CXXMethod_isPureVirtual = clang.clang_CXXMethod_isPureVirtual,
    ---@type fun(C:CXCursor):integer
    clang_CXXMethod_isStatic = clang.clang_CXXMethod_isStatic,
    ---@type fun(C:CXCursor):integer
    clang_CXXMethod_isVirtual = clang.clang_CXXMethod_isVirtual,
    ---@type fun(C:CXCursor):integer
    clang_CXXRecord_isAbstract = clang.clang_CXXRecord_isAbstract,
    ---@type fun(C:CXCursor):integer
    clang_EnumDecl_isScoped = clang.clang_EnumDecl_isScoped,
    ---@type fun(C:CXCursor):integer
    clang_CXXMethod_isConst = clang.clang_CXXMethod_isConst,
    ---@type fun(C:CXCursor):CXCursorKind
    clang_getTemplateCursorKind = clang.clang_getTemplateCursorKind,
    ---@type fun(C:CXCursor):CXCursor
    clang_getSpecializedCursorTemplate = clang.clang_getSpecializedCursorTemplate,
    ---@type fun(C:CXCursor, NameFlags:integer, PieceIndex:integer):CXSourceRange
    clang_getCursorReferenceNameRange = clang.clang_getCursorReferenceNameRange,
    ---@type fun(TU:CXTranslationUnit, Location:CXSourceLocation):cdata
    clang_getToken = clang.clang_getToken,
    ---@type fun(param1:CXToken):CXTokenKind
    clang_getTokenKind = clang.clang_getTokenKind,
    ---@type fun(param1:CXTranslationUnit, param2:CXToken):CXString
    clang_getTokenSpelling = clang.clang_getTokenSpelling,
    ---@type fun(param1:CXTranslationUnit, param2:CXToken):CXSourceLocation
    clang_getTokenLocation = clang.clang_getTokenLocation,
    ---@type fun(param1:CXTranslationUnit, param2:CXToken):CXSourceRange
    clang_getTokenExtent = clang.clang_getTokenExtent,
    ---@type fun(TU:CXTranslationUnit, Range:CXSourceRange, Tokens:cdata, NumTokens:cdata):
    clang_tokenize = clang.clang_tokenize,
    ---@type fun(TU:CXTranslationUnit, Tokens:cdata, NumTokens:integer, Cursors:cdata):
    clang_annotateTokens = clang.clang_annotateTokens,
    ---@type fun(TU:CXTranslationUnit, Tokens:cdata, NumTokens:integer):
    clang_disposeTokens = clang.clang_disposeTokens,
    ---@type fun(Kind:CXCursorKind):CXString
    clang_getCursorKindSpelling = clang.clang_getCursorKindSpelling,
    ---@type fun(param1:CXCursor, startBuf:cdata, endBuf:cdata, startLine:cdata, startColumn:cdata, endLine:cdata, endColumn:cdata):
    clang_getDefinitionSpellingAndExtent = clang.clang_getDefinitionSpellingAndExtent,
    ---@type fun():
    clang_enableStackTraces = clang.clang_enableStackTraces,
    ---@type fun(fn:cdata, user_data:cdata, stack_size:integer):
    clang_executeOnThread = clang.clang_executeOnThread,
    ---@type fun(completion_string:CXCompletionString, chunk_number:integer):CXCompletionChunkKind
    clang_getCompletionChunkKind = clang.clang_getCompletionChunkKind,
    ---@type fun(completion_string:CXCompletionString, chunk_number:integer):CXString
    clang_getCompletionChunkText = clang.clang_getCompletionChunkText,
    ---@type fun(completion_string:CXCompletionString, chunk_number:integer):CXCompletionString
    clang_getCompletionChunkCompletionString = clang.clang_getCompletionChunkCompletionString,
    ---@type fun(completion_string:CXCompletionString):integer
    clang_getNumCompletionChunks = clang.clang_getNumCompletionChunks,
    ---@type fun(completion_string:CXCompletionString):integer
    clang_getCompletionPriority = clang.clang_getCompletionPriority,
    ---@type fun(completion_string:CXCompletionString):CXAvailabilityKind
    clang_getCompletionAvailability = clang.clang_getCompletionAvailability,
    ---@type fun(completion_string:CXCompletionString):integer
    clang_getCompletionNumAnnotations = clang.clang_getCompletionNumAnnotations,
    ---@type fun(completion_string:CXCompletionString, annotation_number:integer):CXString
    clang_getCompletionAnnotation = clang.clang_getCompletionAnnotation,
    ---@type fun(completion_string:CXCompletionString, kind:cdata):CXString
    clang_getCompletionParent = clang.clang_getCompletionParent,
    ---@type fun(completion_string:CXCompletionString):CXString
    clang_getCompletionBriefComment = clang.clang_getCompletionBriefComment,
    ---@type fun(cursor:CXCursor):CXCompletionString
    clang_getCursorCompletionString = clang.clang_getCursorCompletionString,
    ---@type fun(results:cdata, completion_index:integer):integer
    clang_getCompletionNumFixIts = clang.clang_getCompletionNumFixIts,
    ---@type fun(results:cdata, completion_index:integer, fixit_index:integer, replacement_range:cdata):CXString
    clang_getCompletionFixIt = clang.clang_getCompletionFixIt,
    ---@type fun():integer
    clang_defaultCodeCompleteOptions = clang.clang_defaultCodeCompleteOptions,
    ---@type fun(TU:CXTranslationUnit, complete_filename:string, complete_line:integer, complete_column:integer, unsaved_files:cdata, num_unsaved_files:integer, options:integer):cdata
    clang_codeCompleteAt = clang.clang_codeCompleteAt,
    ---@type fun(Results:cdata, NumResults:integer):
    clang_sortCodeCompletionResults = clang.clang_sortCodeCompletionResults,
    ---@type fun(Results:cdata):
    clang_disposeCodeCompleteResults = clang.clang_disposeCodeCompleteResults,
    ---@type fun(Results:cdata):integer
    clang_codeCompleteGetNumDiagnostics = clang.clang_codeCompleteGetNumDiagnostics,
    ---@type fun(Results:cdata, Index:integer):CXDiagnostic
    clang_codeCompleteGetDiagnostic = clang.clang_codeCompleteGetDiagnostic,
    ---@type fun(Results:cdata):integer
    clang_codeCompleteGetContexts = clang.clang_codeCompleteGetContexts,
    ---@type fun(Results:cdata, IsIncomplete:cdata):CXCursorKind
    clang_codeCompleteGetContainerKind = clang.clang_codeCompleteGetContainerKind,
    ---@type fun(Results:cdata):CXString
    clang_codeCompleteGetContainerUSR = clang.clang_codeCompleteGetContainerUSR,
    ---@type fun(Results:cdata):CXString
    clang_codeCompleteGetObjCSelector = clang.clang_codeCompleteGetObjCSelector,
    ---@type fun():CXString
    clang_getClangVersion = clang.clang_getClangVersion,
    ---@type fun(isEnabled:integer):
    clang_toggleCrashRecovery = clang.clang_toggleCrashRecovery,
    ---@type fun(tu:CXTranslationUnit, visitor:CXInclusionVisitor, client_data:CXClientData):
    clang_getInclusions = clang.clang_getInclusions,
    ---@type fun(C:CXCursor):CXEvalResult
    clang_Cursor_Evaluate = clang.clang_Cursor_Evaluate,
    ---@type fun(E:CXEvalResult):CXEvalResultKind
    clang_EvalResult_getKind = clang.clang_EvalResult_getKind,
    ---@type fun(E:CXEvalResult):integer
    clang_EvalResult_getAsInt = clang.clang_EvalResult_getAsInt,
    ---@type fun(E:CXEvalResult):integer
    clang_EvalResult_getAsLongLong = clang.clang_EvalResult_getAsLongLong,
    ---@type fun(E:CXEvalResult):integer
    clang_EvalResult_isUnsignedInt = clang.clang_EvalResult_isUnsignedInt,
    ---@type fun(E:CXEvalResult):integer
    clang_EvalResult_getAsUnsigned = clang.clang_EvalResult_getAsUnsigned,
    ---@type fun(E:CXEvalResult):double
    clang_EvalResult_getAsDouble = clang.clang_EvalResult_getAsDouble,
    ---@type fun(E:CXEvalResult):string
    clang_EvalResult_getAsStr = clang.clang_EvalResult_getAsStr,
    ---@type fun(E:CXEvalResult):
    clang_EvalResult_dispose = clang.clang_EvalResult_dispose,
    ---@type fun(path:string):CXRemapping
    clang_getRemappings = clang.clang_getRemappings,
    ---@type fun(filePaths:cdata, numFiles:integer):CXRemapping
    clang_getRemappingsFromFileList = clang.clang_getRemappingsFromFileList,
    ---@type fun(param1:CXRemapping):integer
    clang_remap_getNumFiles = clang.clang_remap_getNumFiles,
    ---@type fun(param1:CXRemapping, index:integer, original:cdata, transformed:cdata):
    clang_remap_getFilenames = clang.clang_remap_getFilenames,
    ---@type fun(param1:CXRemapping):
    clang_remap_dispose = clang.clang_remap_dispose,
    ---@type fun(cursor:CXCursor, file:CXFile, visitor:CXCursorAndRangeVisitor):CXResult
    clang_findReferencesInFile = clang.clang_findReferencesInFile,
    ---@type fun(TU:CXTranslationUnit, file:CXFile, visitor:CXCursorAndRangeVisitor):CXResult
    clang_findIncludesInFile = clang.clang_findIncludesInFile,
    ---@type fun(param1:CXIdxEntityKind):integer
    clang_index_isEntityObjCContainerKind = clang.clang_index_isEntityObjCContainerKind,
    ---@type fun(param1:cdata):cdata
    clang_index_getObjCContainerDeclInfo = clang.clang_index_getObjCContainerDeclInfo,
    ---@type fun(param1:cdata):cdata
    clang_index_getObjCInterfaceDeclInfo = clang.clang_index_getObjCInterfaceDeclInfo,
    ---@type fun(param1:cdata):cdata
    clang_index_getObjCCategoryDeclInfo = clang.clang_index_getObjCCategoryDeclInfo,
    ---@type fun(param1:cdata):cdata
    clang_index_getObjCProtocolRefListInfo = clang.clang_index_getObjCProtocolRefListInfo,
    ---@type fun(param1:cdata):cdata
    clang_index_getObjCPropertyDeclInfo = clang.clang_index_getObjCPropertyDeclInfo,
    ---@type fun(param1:cdata):cdata
    clang_index_getIBOutletCollectionAttrInfo = clang.clang_index_getIBOutletCollectionAttrInfo,
    ---@type fun(param1:cdata):cdata
    clang_index_getCXXClassDeclInfo = clang.clang_index_getCXXClassDeclInfo,
    ---@type fun(param1:cdata):CXIdxClientContainer
    clang_index_getClientContainer = clang.clang_index_getClientContainer,
    ---@type fun(param1:cdata, param2:CXIdxClientContainer):
    clang_index_setClientContainer = clang.clang_index_setClientContainer,
    ---@type fun(param1:cdata):CXIdxClientEntity
    clang_index_getClientEntity = clang.clang_index_getClientEntity,
    ---@type fun(param1:cdata, param2:CXIdxClientEntity):
    clang_index_setClientEntity = clang.clang_index_setClientEntity,
    ---@type fun(CIdx:CXIndex):CXIndexAction
    clang_IndexAction_create = clang.clang_IndexAction_create,
    ---@type fun(param1:CXIndexAction):
    clang_IndexAction_dispose = clang.clang_IndexAction_dispose,
    ---@type fun(param1:CXIndexAction, client_data:CXClientData, index_callbacks:cdata, index_callbacks_size:integer, index_options:integer, source_filename:string, command_line_args:cdata, num_command_line_args:integer, unsaved_files:cdata, num_unsaved_files:integer, out_TU:cdata, TU_options:integer):integer
    clang_indexSourceFile = clang.clang_indexSourceFile,
    ---@type fun(param1:CXIndexAction, client_data:CXClientData, index_callbacks:cdata, index_callbacks_size:integer, index_options:integer, source_filename:string, command_line_args:cdata, num_command_line_args:integer, unsaved_files:cdata, num_unsaved_files:integer, out_TU:cdata, TU_options:integer):integer
    clang_indexSourceFileFullArgv = clang.clang_indexSourceFileFullArgv,
    ---@type fun(param1:CXIndexAction, client_data:CXClientData, index_callbacks:cdata, index_callbacks_size:integer, index_options:integer, param6:CXTranslationUnit):integer
    clang_indexTranslationUnit = clang.clang_indexTranslationUnit,
    ---@type fun(loc:CXIdxLoc, indexFile:cdata, file:cdata, line:cdata, column:cdata, offset:cdata):
    clang_indexLoc_getFileLocation = clang.clang_indexLoc_getFileLocation,
    ---@type fun(loc:CXIdxLoc):CXSourceLocation
    clang_indexLoc_getCXSourceLocation = clang.clang_indexLoc_getCXSourceLocation,
    ---@type fun(T:CXType, visitor:CXFieldVisitor, client_data:CXClientData):integer
    clang_Type_visitFields = clang.clang_Type_visitFields,
}
return M
